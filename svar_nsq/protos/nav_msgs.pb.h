// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nav_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nav_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "std_msgs.pb.h"
#include "geometry_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nav_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nav_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nav_5fmsgs_2eproto;
namespace nav_msgs {
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
}  // namespace nav_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::nav_msgs::Odometry* Arena::CreateMaybeMessage<::nav_msgs::Odometry>(Arena*);
template<> ::nav_msgs::Path* Arena::CreateMaybeMessage<::nav_msgs::Path>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nav_msgs {

// ===================================================================

class Odometry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav_msgs.Odometry) */ {
 public:
  Odometry();
  virtual ~Odometry();

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Odometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return CreateMaybeMessage<Odometry>(nullptr);
  }

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav_msgs.Odometry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nav_5fmsgs_2eproto);
    return ::descriptor_table_nav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFrameIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 3,
    kTwistFieldNumber = 4,
  };
  // string child_frame_id = 2;
  void clear_child_frame_id();
  const std::string& child_frame_id() const;
  void set_child_frame_id(const std::string& value);
  void set_child_frame_id(std::string&& value);
  void set_child_frame_id(const char* value);
  void set_child_frame_id(const char* value, size_t size);
  std::string* mutable_child_frame_id();
  std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* child_frame_id);
  private:
  const std::string& _internal_child_frame_id() const;
  void _internal_set_child_frame_id(const std::string& value);
  std::string* _internal_mutable_child_frame_id();
  public:

  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // .geometry_msgs.PoseWithCovariance pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::geometry_msgs::PoseWithCovariance& pose() const;
  ::geometry_msgs::PoseWithCovariance* release_pose();
  ::geometry_msgs::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::geometry_msgs::PoseWithCovariance* pose);
  private:
  const ::geometry_msgs::PoseWithCovariance& _internal_pose() const;
  ::geometry_msgs::PoseWithCovariance* _internal_mutable_pose();
  public:

  // .geometry_msgs.TwistWithCovariance twist = 4;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::geometry_msgs::TwistWithCovariance& twist() const;
  ::geometry_msgs::TwistWithCovariance* release_twist();
  ::geometry_msgs::TwistWithCovariance* mutable_twist();
  void set_allocated_twist(::geometry_msgs::TwistWithCovariance* twist);
  private:
  const ::geometry_msgs::TwistWithCovariance& _internal_twist() const;
  ::geometry_msgs::TwistWithCovariance* _internal_mutable_twist();
  public:

  // @@protoc_insertion_point(class_scope:nav_msgs.Odometry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_id_;
  ::std_msgs::Header* header_;
  ::geometry_msgs::PoseWithCovariance* pose_;
  ::geometry_msgs::TwistWithCovariance* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nav_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nav_msgs.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nav_msgs.Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nav_5fmsgs_2eproto);
    return ::descriptor_table_nav_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosesFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // repeated .geometry_msgs.PoseStamped poses = 3;
  int poses_size() const;
  private:
  int _internal_poses_size() const;
  public:
  void clear_poses();
  ::geometry_msgs::PoseStamped* mutable_poses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry_msgs::PoseStamped >*
      mutable_poses();
  private:
  const ::geometry_msgs::PoseStamped& _internal_poses(int index) const;
  ::geometry_msgs::PoseStamped* _internal_add_poses();
  public:
  const ::geometry_msgs::PoseStamped& poses(int index) const;
  ::geometry_msgs::PoseStamped* add_poses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry_msgs::PoseStamped >&
      poses() const;

  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // int32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nav_msgs.Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry_msgs::PoseStamped > poses_;
  ::std_msgs::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nav_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Odometry

// .std_msgs.Header header = 1;
inline bool Odometry::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Odometry::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& Odometry::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& Odometry::header() const {
  // @@protoc_insertion_point(field_get:nav_msgs.Odometry.header)
  return _internal_header();
}
inline ::std_msgs::Header* Odometry::release_header() {
  // @@protoc_insertion_point(field_release:nav_msgs.Odometry.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* Odometry::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* Odometry::mutable_header() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.Odometry.header)
  return _internal_mutable_header();
}
inline void Odometry::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.Odometry.header)
}

// string child_frame_id = 2;
inline void Odometry::clear_child_frame_id() {
  child_frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:nav_msgs.Odometry.child_frame_id)
  return _internal_child_frame_id();
}
inline void Odometry::set_child_frame_id(const std::string& value) {
  _internal_set_child_frame_id(value);
  // @@protoc_insertion_point(field_set:nav_msgs.Odometry.child_frame_id)
}
inline std::string* Odometry::mutable_child_frame_id() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.Odometry.child_frame_id)
  return _internal_mutable_child_frame_id();
}
inline const std::string& Odometry::_internal_child_frame_id() const {
  return child_frame_id_.GetNoArena();
}
inline void Odometry::_internal_set_child_frame_id(const std::string& value) {
  
  child_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Odometry::set_child_frame_id(std::string&& value) {
  
  child_frame_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nav_msgs.Odometry.child_frame_id)
}
inline void Odometry::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  child_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nav_msgs.Odometry.child_frame_id)
}
inline void Odometry::set_child_frame_id(const char* value, size_t size) {
  
  child_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nav_msgs.Odometry.child_frame_id)
}
inline std::string* Odometry::_internal_mutable_child_frame_id() {
  
  return child_frame_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Odometry::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:nav_msgs.Odometry.child_frame_id)
  
  return child_frame_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Odometry::set_allocated_child_frame_id(std::string* child_frame_id) {
  if (child_frame_id != nullptr) {
    
  } else {
    
  }
  child_frame_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.Odometry.child_frame_id)
}

// .geometry_msgs.PoseWithCovariance pose = 3;
inline bool Odometry::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Odometry::has_pose() const {
  return _internal_has_pose();
}
inline const ::geometry_msgs::PoseWithCovariance& Odometry::_internal_pose() const {
  const ::geometry_msgs::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::PoseWithCovariance*>(
      &::geometry_msgs::_PoseWithCovariance_default_instance_);
}
inline const ::geometry_msgs::PoseWithCovariance& Odometry::pose() const {
  // @@protoc_insertion_point(field_get:nav_msgs.Odometry.pose)
  return _internal_pose();
}
inline ::geometry_msgs::PoseWithCovariance* Odometry::release_pose() {
  // @@protoc_insertion_point(field_release:nav_msgs.Odometry.pose)
  
  ::geometry_msgs::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::geometry_msgs::PoseWithCovariance* Odometry::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::PoseWithCovariance>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::geometry_msgs::PoseWithCovariance* Odometry::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.Odometry.pose)
  return _internal_mutable_pose();
}
inline void Odometry::set_allocated_pose(::geometry_msgs::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.Odometry.pose)
}

// .geometry_msgs.TwistWithCovariance twist = 4;
inline bool Odometry::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool Odometry::has_twist() const {
  return _internal_has_twist();
}
inline const ::geometry_msgs::TwistWithCovariance& Odometry::_internal_twist() const {
  const ::geometry_msgs::TwistWithCovariance* p = twist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::TwistWithCovariance*>(
      &::geometry_msgs::_TwistWithCovariance_default_instance_);
}
inline const ::geometry_msgs::TwistWithCovariance& Odometry::twist() const {
  // @@protoc_insertion_point(field_get:nav_msgs.Odometry.twist)
  return _internal_twist();
}
inline ::geometry_msgs::TwistWithCovariance* Odometry::release_twist() {
  // @@protoc_insertion_point(field_release:nav_msgs.Odometry.twist)
  
  ::geometry_msgs::TwistWithCovariance* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::geometry_msgs::TwistWithCovariance* Odometry::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::TwistWithCovariance>(GetArenaNoVirtual());
    twist_ = p;
  }
  return twist_;
}
inline ::geometry_msgs::TwistWithCovariance* Odometry::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.Odometry.twist)
  return _internal_mutable_twist();
}
inline void Odometry::set_allocated_twist(::geometry_msgs::TwistWithCovariance* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.Odometry.twist)
}

// -------------------------------------------------------------------

// Path

// .std_msgs.Header header = 1;
inline bool Path::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Path::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& Path::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& Path::header() const {
  // @@protoc_insertion_point(field_get:nav_msgs.Path.header)
  return _internal_header();
}
inline ::std_msgs::Header* Path::release_header() {
  // @@protoc_insertion_point(field_release:nav_msgs.Path.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* Path::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* Path::mutable_header() {
  // @@protoc_insertion_point(field_mutable:nav_msgs.Path.header)
  return _internal_mutable_header();
}
inline void Path::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:nav_msgs.Path.header)
}

// int32 size = 2;
inline void Path::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Path::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Path::size() const {
  // @@protoc_insertion_point(field_get:nav_msgs.Path.size)
  return _internal_size();
}
inline void Path::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void Path::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:nav_msgs.Path.size)
}

// repeated .geometry_msgs.PoseStamped poses = 3;
inline int Path::_internal_poses_size() const {
  return poses_.size();
}
inline int Path::poses_size() const {
  return _internal_poses_size();
}
inline ::geometry_msgs::PoseStamped* Path::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:nav_msgs.Path.poses)
  return poses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry_msgs::PoseStamped >*
Path::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:nav_msgs.Path.poses)
  return &poses_;
}
inline const ::geometry_msgs::PoseStamped& Path::_internal_poses(int index) const {
  return poses_.Get(index);
}
inline const ::geometry_msgs::PoseStamped& Path::poses(int index) const {
  // @@protoc_insertion_point(field_get:nav_msgs.Path.poses)
  return _internal_poses(index);
}
inline ::geometry_msgs::PoseStamped* Path::_internal_add_poses() {
  return poses_.Add();
}
inline ::geometry_msgs::PoseStamped* Path::add_poses() {
  // @@protoc_insertion_point(field_add:nav_msgs.Path.poses)
  return _internal_add_poses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::geometry_msgs::PoseStamped >&
Path::poses() const {
  // @@protoc_insertion_point(field_list:nav_msgs.Path.poses)
  return poses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nav_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nav_5fmsgs_2eproto
