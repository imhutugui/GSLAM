// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "std_msgs.pb.h"
#include "geometry_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_5fmsgs_2eproto;
namespace sensor_msgs {
class CompressedImage;
class CompressedImageDefaultTypeInternal;
extern CompressedImageDefaultTypeInternal _CompressedImage_default_instance_;
class DiffEncoder;
class DiffEncoderDefaultTypeInternal;
extern DiffEncoderDefaultTypeInternal _DiffEncoder_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Imu;
class ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class LaserScan;
class LaserScanDefaultTypeInternal;
extern LaserScanDefaultTypeInternal _LaserScan_default_instance_;
class NavSatFix;
class NavSatFixDefaultTypeInternal;
extern NavSatFixDefaultTypeInternal _NavSatFix_default_instance_;
class NavSatStatus;
class NavSatStatusDefaultTypeInternal;
extern NavSatStatusDefaultTypeInternal _NavSatStatus_default_instance_;
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointField;
class PointFieldDefaultTypeInternal;
extern PointFieldDefaultTypeInternal _PointField_default_instance_;
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::sensor_msgs::CompressedImage* Arena::CreateMaybeMessage<::sensor_msgs::CompressedImage>(Arena*);
template<> ::sensor_msgs::DiffEncoder* Arena::CreateMaybeMessage<::sensor_msgs::DiffEncoder>(Arena*);
template<> ::sensor_msgs::Image* Arena::CreateMaybeMessage<::sensor_msgs::Image>(Arena*);
template<> ::sensor_msgs::Imu* Arena::CreateMaybeMessage<::sensor_msgs::Imu>(Arena*);
template<> ::sensor_msgs::LaserScan* Arena::CreateMaybeMessage<::sensor_msgs::LaserScan>(Arena*);
template<> ::sensor_msgs::NavSatFix* Arena::CreateMaybeMessage<::sensor_msgs::NavSatFix>(Arena*);
template<> ::sensor_msgs::NavSatStatus* Arena::CreateMaybeMessage<::sensor_msgs::NavSatStatus>(Arena*);
template<> ::sensor_msgs::PointCloud* Arena::CreateMaybeMessage<::sensor_msgs::PointCloud>(Arena*);
template<> ::sensor_msgs::PointField* Arena::CreateMaybeMessage<::sensor_msgs::PointField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sensor_msgs {

enum PointField_Type : int {
  PointField_Type_BYTE = 0,
  PointField_Type_INT8 = 1,
  PointField_Type_UINT8 = 2,
  PointField_Type_INT16 = 3,
  PointField_Type_UINT16 = 4,
  PointField_Type_INT32 = 5,
  PointField_Type_UINT32 = 6,
  PointField_Type_FLOAT32 = 7,
  PointField_Type_FLOAT64 = 8,
  PointField_Type_PointField_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PointField_Type_PointField_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PointField_Type_IsValid(int value);
constexpr PointField_Type PointField_Type_Type_MIN = PointField_Type_BYTE;
constexpr PointField_Type PointField_Type_Type_MAX = PointField_Type_FLOAT64;
constexpr int PointField_Type_Type_ARRAYSIZE = PointField_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointField_Type_descriptor();
template<typename T>
inline const std::string& PointField_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PointField_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PointField_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PointField_Type_descriptor(), enum_t_value);
}
inline bool PointField_Type_Parse(
    const std::string& name, PointField_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PointField_Type>(
    PointField_Type_descriptor(), name, value);
}
enum NavSatStatus_STATUS : int {
  NavSatStatus_STATUS_STATUS_NO_FIX = 0,
  NavSatStatus_STATUS_STATUS_FIX = 1,
  NavSatStatus_STATUS_STATUS_SBAS_FIX = 2,
  NavSatStatus_STATUS_STATUS_GBAS_FIX = 3,
  NavSatStatus_STATUS_NavSatStatus_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavSatStatus_STATUS_NavSatStatus_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavSatStatus_STATUS_IsValid(int value);
constexpr NavSatStatus_STATUS NavSatStatus_STATUS_STATUS_MIN = NavSatStatus_STATUS_STATUS_NO_FIX;
constexpr NavSatStatus_STATUS NavSatStatus_STATUS_STATUS_MAX = NavSatStatus_STATUS_STATUS_GBAS_FIX;
constexpr int NavSatStatus_STATUS_STATUS_ARRAYSIZE = NavSatStatus_STATUS_STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavSatStatus_STATUS_descriptor();
template<typename T>
inline const std::string& NavSatStatus_STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavSatStatus_STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavSatStatus_STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavSatStatus_STATUS_descriptor(), enum_t_value);
}
inline bool NavSatStatus_STATUS_Parse(
    const std::string& name, NavSatStatus_STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavSatStatus_STATUS>(
    NavSatStatus_STATUS_descriptor(), name, value);
}
enum NavSatStatus_SERVICE : int {
  NavSatStatus_SERVICE_NONE = 0,
  NavSatStatus_SERVICE_SERVICE_GPS = 1,
  NavSatStatus_SERVICE_SERVICE_GLONASS = 2,
  NavSatStatus_SERVICE_SERVICE_COMPASS = 4,
  NavSatStatus_SERVICE_SERVICE_GALILEO = 8,
  NavSatStatus_SERVICE_NavSatStatus_SERVICE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavSatStatus_SERVICE_NavSatStatus_SERVICE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavSatStatus_SERVICE_IsValid(int value);
constexpr NavSatStatus_SERVICE NavSatStatus_SERVICE_SERVICE_MIN = NavSatStatus_SERVICE_NONE;
constexpr NavSatStatus_SERVICE NavSatStatus_SERVICE_SERVICE_MAX = NavSatStatus_SERVICE_SERVICE_GALILEO;
constexpr int NavSatStatus_SERVICE_SERVICE_ARRAYSIZE = NavSatStatus_SERVICE_SERVICE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavSatStatus_SERVICE_descriptor();
template<typename T>
inline const std::string& NavSatStatus_SERVICE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavSatStatus_SERVICE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavSatStatus_SERVICE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavSatStatus_SERVICE_descriptor(), enum_t_value);
}
inline bool NavSatStatus_SERVICE_Parse(
    const std::string& name, NavSatStatus_SERVICE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavSatStatus_SERVICE>(
    NavSatStatus_SERVICE_descriptor(), name, value);
}
enum NavSatFix_COVARIANCE_TYPE : int {
  NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_UNKNOWN = 0,
  NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_APPROXIMATED = 1,
  NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_DIAGONAL_KNOWN = 2,
  NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_KNOWN = 3,
  NavSatFix_COVARIANCE_TYPE_NavSatFix_COVARIANCE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavSatFix_COVARIANCE_TYPE_NavSatFix_COVARIANCE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavSatFix_COVARIANCE_TYPE_IsValid(int value);
constexpr NavSatFix_COVARIANCE_TYPE NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_MIN = NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_UNKNOWN;
constexpr NavSatFix_COVARIANCE_TYPE NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_MAX = NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_KNOWN;
constexpr int NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_ARRAYSIZE = NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavSatFix_COVARIANCE_TYPE_descriptor();
template<typename T>
inline const std::string& NavSatFix_COVARIANCE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavSatFix_COVARIANCE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavSatFix_COVARIANCE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavSatFix_COVARIANCE_TYPE_descriptor(), enum_t_value);
}
inline bool NavSatFix_COVARIANCE_TYPE_Parse(
    const std::string& name, NavSatFix_COVARIANCE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavSatFix_COVARIANCE_TYPE>(
    NavSatFix_COVARIANCE_TYPE_descriptor(), name, value);
}
// ===================================================================

class PointField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.PointField) */ {
 public:
  PointField();
  virtual ~PointField();

  PointField(const PointField& from);
  PointField(PointField&& from) noexcept
    : PointField() {
    *this = ::std::move(from);
  }

  inline PointField& operator=(const PointField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointField& operator=(PointField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointField* internal_default_instance() {
    return reinterpret_cast<const PointField*>(
               &_PointField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointField& a, PointField& b) {
    a.Swap(&b);
  }
  inline void Swap(PointField* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointField* New() const final {
    return CreateMaybeMessage<PointField>(nullptr);
  }

  PointField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointField& from);
  void MergeFrom(const PointField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.PointField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PointField_Type Type;
  static constexpr Type BYTE =
    PointField_Type_BYTE;
  static constexpr Type INT8 =
    PointField_Type_INT8;
  static constexpr Type UINT8 =
    PointField_Type_UINT8;
  static constexpr Type INT16 =
    PointField_Type_INT16;
  static constexpr Type UINT16 =
    PointField_Type_UINT16;
  static constexpr Type INT32 =
    PointField_Type_INT32;
  static constexpr Type UINT32 =
    PointField_Type_UINT32;
  static constexpr Type FLOAT32 =
    PointField_Type_FLOAT32;
  static constexpr Type FLOAT64 =
    PointField_Type_FLOAT64;
  static inline bool Type_IsValid(int value) {
    return PointField_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PointField_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PointField_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PointField_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return PointField_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PointField_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return PointField_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kDatatypeFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .sensor_msgs.PointField.Type datatype = 3;
  void clear_datatype();
  ::sensor_msgs::PointField_Type datatype() const;
  void set_datatype(::sensor_msgs::PointField_Type value);
  private:
  ::sensor_msgs::PointField_Type _internal_datatype() const;
  void _internal_set_datatype(::sensor_msgs::PointField_Type value);
  public:

  // int32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.PointField)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  int datatype_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PointCloud :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.PointCloud) */ {
 public:
  PointCloud();
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(nullptr);
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.PointCloud";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kFieldsNumFieldNumber = 4,
  };
  // repeated .sensor_msgs.PointField fields = 5;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::sensor_msgs::PointField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensor_msgs::PointField >*
      mutable_fields();
  private:
  const ::sensor_msgs::PointField& _internal_fields(int index) const;
  ::sensor_msgs::PointField* _internal_add_fields();
  public:
  const ::sensor_msgs::PointField& fields(int index) const;
  ::sensor_msgs::PointField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensor_msgs::PointField >&
      fields() const;

  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fields_num = 4;
  void clear_fields_num();
  ::PROTOBUF_NAMESPACE_ID::int32 fields_num() const;
  void set_fields_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fields_num() const;
  void _internal_set_fields_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.PointCloud)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensor_msgs::PointField > fields_;
  ::std_msgs::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 fields_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class LaserScan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.LaserScan) */ {
 public:
  LaserScan();
  virtual ~LaserScan();

  LaserScan(const LaserScan& from);
  LaserScan(LaserScan&& from) noexcept
    : LaserScan() {
    *this = ::std::move(from);
  }

  inline LaserScan& operator=(const LaserScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserScan& operator=(LaserScan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserScan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserScan* internal_default_instance() {
    return reinterpret_cast<const LaserScan*>(
               &_LaserScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LaserScan& a, LaserScan& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserScan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserScan* New() const final {
    return CreateMaybeMessage<LaserScan>(nullptr);
  }

  LaserScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserScan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserScan& from);
  void MergeFrom(const LaserScan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserScan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.LaserScan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 9,
    kIntensitiesFieldNumber = 10,
    kHeaderFieldNumber = 1,
    kAngleMinFieldNumber = 2,
    kAngleMaxFieldNumber = 3,
    kAngleIncrementFieldNumber = 4,
    kTimeIncrementFieldNumber = 5,
    kScanTimeFieldNumber = 6,
    kRangeMinFieldNumber = 7,
    kRangeMaxFieldNumber = 8,
  };
  // repeated float ranges = 9;
  int ranges_size() const;
  private:
  int _internal_ranges_size() const;
  public:
  void clear_ranges();
  private:
  float _internal_ranges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ranges() const;
  void _internal_add_ranges(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ranges();
  public:
  float ranges(int index) const;
  void set_ranges(int index, float value);
  void add_ranges(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ranges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ranges();

  // repeated float intensities = 10;
  int intensities_size() const;
  private:
  int _internal_intensities_size() const;
  public:
  void clear_intensities();
  private:
  float _internal_intensities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_intensities() const;
  void _internal_add_intensities(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_intensities();
  public:
  float intensities(int index) const;
  void set_intensities(int index, float value);
  void add_intensities(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      intensities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_intensities();

  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // float angle_min = 2;
  void clear_angle_min();
  float angle_min() const;
  void set_angle_min(float value);
  private:
  float _internal_angle_min() const;
  void _internal_set_angle_min(float value);
  public:

  // float angle_max = 3;
  void clear_angle_max();
  float angle_max() const;
  void set_angle_max(float value);
  private:
  float _internal_angle_max() const;
  void _internal_set_angle_max(float value);
  public:

  // float angle_increment = 4;
  void clear_angle_increment();
  float angle_increment() const;
  void set_angle_increment(float value);
  private:
  float _internal_angle_increment() const;
  void _internal_set_angle_increment(float value);
  public:

  // float time_increment = 5;
  void clear_time_increment();
  float time_increment() const;
  void set_time_increment(float value);
  private:
  float _internal_time_increment() const;
  void _internal_set_time_increment(float value);
  public:

  // float scan_time = 6;
  void clear_scan_time();
  float scan_time() const;
  void set_scan_time(float value);
  private:
  float _internal_scan_time() const;
  void _internal_set_scan_time(float value);
  public:

  // float range_min = 7;
  void clear_range_min();
  float range_min() const;
  void set_range_min(float value);
  private:
  float _internal_range_min() const;
  void _internal_set_range_min(float value);
  public:

  // float range_max = 8;
  void clear_range_max();
  float range_max() const;
  void set_range_max(float value);
  private:
  float _internal_range_max() const;
  void _internal_set_range_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.LaserScan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ranges_;
  mutable std::atomic<int> _ranges_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > intensities_;
  mutable std::atomic<int> _intensities_cached_byte_size_;
  ::std_msgs::Header* header_;
  float angle_min_;
  float angle_max_;
  float angle_increment_;
  float time_increment_;
  float scan_time_;
  float range_min_;
  float range_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Imu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.Imu) */ {
 public:
  Imu();
  virtual ~Imu();

  Imu(const Imu& from);
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Imu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }
  inline void Swap(Imu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Imu* New() const final {
    return CreateMaybeMessage<Imu>(nullptr);
  }

  Imu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Imu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Imu& from);
  void MergeFrom(const Imu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Imu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.Imu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationCovarianceFieldNumber = 3,
    kAngularVelocityCovarianceFieldNumber = 5,
    kLinearAccelerationCovarianceFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kAngularVelocityFieldNumber = 4,
    kLinearAccelerationFieldNumber = 6,
  };
  // repeated double orientation_covariance = 3;
  int orientation_covariance_size() const;
  private:
  int _internal_orientation_covariance_size() const;
  public:
  void clear_orientation_covariance();
  private:
  double _internal_orientation_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_orientation_covariance() const;
  void _internal_add_orientation_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_orientation_covariance();
  public:
  double orientation_covariance(int index) const;
  void set_orientation_covariance(int index, double value);
  void add_orientation_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      orientation_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_orientation_covariance();

  // repeated double angular_velocity_covariance = 5;
  int angular_velocity_covariance_size() const;
  private:
  int _internal_angular_velocity_covariance_size() const;
  public:
  void clear_angular_velocity_covariance();
  private:
  double _internal_angular_velocity_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_angular_velocity_covariance() const;
  void _internal_add_angular_velocity_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_angular_velocity_covariance();
  public:
  double angular_velocity_covariance(int index) const;
  void set_angular_velocity_covariance(int index, double value);
  void add_angular_velocity_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      angular_velocity_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_angular_velocity_covariance();

  // repeated double linear_acceleration_covariance = 7;
  int linear_acceleration_covariance_size() const;
  private:
  int _internal_linear_acceleration_covariance_size() const;
  public:
  void clear_linear_acceleration_covariance();
  private:
  double _internal_linear_acceleration_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_linear_acceleration_covariance() const;
  void _internal_add_linear_acceleration_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_linear_acceleration_covariance();
  public:
  double linear_acceleration_covariance(int index) const;
  void set_linear_acceleration_covariance(int index, double value);
  void add_linear_acceleration_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      linear_acceleration_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_linear_acceleration_covariance();

  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // .geometry_msgs.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::geometry_msgs::Quaternion& orientation() const;
  ::geometry_msgs::Quaternion* release_orientation();
  ::geometry_msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::geometry_msgs::Quaternion* orientation);
  private:
  const ::geometry_msgs::Quaternion& _internal_orientation() const;
  ::geometry_msgs::Quaternion* _internal_mutable_orientation();
  public:

  // .geometry_msgs.Vector3 angular_velocity = 4;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::geometry_msgs::Vector3& angular_velocity() const;
  ::geometry_msgs::Vector3* release_angular_velocity();
  ::geometry_msgs::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::geometry_msgs::Vector3* angular_velocity);
  private:
  const ::geometry_msgs::Vector3& _internal_angular_velocity() const;
  ::geometry_msgs::Vector3* _internal_mutable_angular_velocity();
  public:

  // .geometry_msgs.Vector3 linear_acceleration = 6;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::geometry_msgs::Vector3& linear_acceleration() const;
  ::geometry_msgs::Vector3* release_linear_acceleration();
  ::geometry_msgs::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::geometry_msgs::Vector3* linear_acceleration);
  private:
  const ::geometry_msgs::Vector3& _internal_linear_acceleration() const;
  ::geometry_msgs::Vector3* _internal_mutable_linear_acceleration();
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.Imu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > orientation_covariance_;
  mutable std::atomic<int> _orientation_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > angular_velocity_covariance_;
  mutable std::atomic<int> _angular_velocity_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > linear_acceleration_covariance_;
  mutable std::atomic<int> _linear_acceleration_covariance_cached_byte_size_;
  ::std_msgs::Header* header_;
  ::geometry_msgs::Quaternion* orientation_;
  ::geometry_msgs::Vector3* angular_velocity_;
  ::geometry_msgs::Vector3* linear_acceleration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodingFieldNumber = 4,
    kDataFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kIsBigendianFieldNumber = 5,
    kStepFieldNumber = 6,
  };
  // string encoding = 4;
  void clear_encoding();
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);
  private:
  const std::string& _internal_encoding() const;
  void _internal_set_encoding(const std::string& value);
  std::string* _internal_mutable_encoding();
  public:

  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_bigendian = 5;
  void clear_is_bigendian();
  bool is_bigendian() const;
  void set_is_bigendian(bool value);
  private:
  bool _internal_is_bigendian() const;
  void _internal_set_is_bigendian(bool value);
  public:

  // uint32 step = 6;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.Image)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::std_msgs::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  bool is_bigendian_;
  ::PROTOBUF_NAMESPACE_ID::uint32 step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CompressedImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.CompressedImage) */ {
 public:
  CompressedImage();
  virtual ~CompressedImage();

  CompressedImage(const CompressedImage& from);
  CompressedImage(CompressedImage&& from) noexcept
    : CompressedImage() {
    *this = ::std::move(from);
  }

  inline CompressedImage& operator=(const CompressedImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressedImage& operator=(CompressedImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompressedImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompressedImage* internal_default_instance() {
    return reinterpret_cast<const CompressedImage*>(
               &_CompressedImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CompressedImage& a, CompressedImage& b) {
    a.Swap(&b);
  }
  inline void Swap(CompressedImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompressedImage* New() const final {
    return CreateMaybeMessage<CompressedImage>(nullptr);
  }

  CompressedImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompressedImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompressedImage& from);
  void MergeFrom(const CompressedImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressedImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.CompressedImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 2,
    kDataFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kSizeFieldNumber = 3,
  };
  // string format = 2;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // int64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.CompressedImage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::std_msgs::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DiffEncoder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.DiffEncoder) */ {
 public:
  DiffEncoder();
  virtual ~DiffEncoder();

  DiffEncoder(const DiffEncoder& from);
  DiffEncoder(DiffEncoder&& from) noexcept
    : DiffEncoder() {
    *this = ::std::move(from);
  }

  inline DiffEncoder& operator=(const DiffEncoder& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffEncoder& operator=(DiffEncoder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiffEncoder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiffEncoder* internal_default_instance() {
    return reinterpret_cast<const DiffEncoder*>(
               &_DiffEncoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DiffEncoder& a, DiffEncoder& b) {
    a.Swap(&b);
  }
  inline void Swap(DiffEncoder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiffEncoder* New() const final {
    return CreateMaybeMessage<DiffEncoder>(nullptr);
  }

  DiffEncoder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiffEncoder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiffEncoder& from);
  void MergeFrom(const DiffEncoder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiffEncoder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.DiffEncoder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeftEncoderFieldNumber = 2,
    kRightEncoderFieldNumber = 3,
  };
  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // float left_encoder = 2;
  void clear_left_encoder();
  float left_encoder() const;
  void set_left_encoder(float value);
  private:
  float _internal_left_encoder() const;
  void _internal_set_left_encoder(float value);
  public:

  // float right_encoder = 3;
  void clear_right_encoder();
  float right_encoder() const;
  void set_right_encoder(float value);
  private:
  float _internal_right_encoder() const;
  void _internal_set_right_encoder(float value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.DiffEncoder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::std_msgs::Header* header_;
  float left_encoder_;
  float right_encoder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class NavSatStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.NavSatStatus) */ {
 public:
  NavSatStatus();
  virtual ~NavSatStatus();

  NavSatStatus(const NavSatStatus& from);
  NavSatStatus(NavSatStatus&& from) noexcept
    : NavSatStatus() {
    *this = ::std::move(from);
  }

  inline NavSatStatus& operator=(const NavSatStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavSatStatus& operator=(NavSatStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavSatStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavSatStatus* internal_default_instance() {
    return reinterpret_cast<const NavSatStatus*>(
               &_NavSatStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NavSatStatus& a, NavSatStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(NavSatStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavSatStatus* New() const final {
    return CreateMaybeMessage<NavSatStatus>(nullptr);
  }

  NavSatStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavSatStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavSatStatus& from);
  void MergeFrom(const NavSatStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavSatStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.NavSatStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NavSatStatus_STATUS STATUS;
  static constexpr STATUS STATUS_NO_FIX =
    NavSatStatus_STATUS_STATUS_NO_FIX;
  static constexpr STATUS STATUS_FIX =
    NavSatStatus_STATUS_STATUS_FIX;
  static constexpr STATUS STATUS_SBAS_FIX =
    NavSatStatus_STATUS_STATUS_SBAS_FIX;
  static constexpr STATUS STATUS_GBAS_FIX =
    NavSatStatus_STATUS_STATUS_GBAS_FIX;
  static inline bool STATUS_IsValid(int value) {
    return NavSatStatus_STATUS_IsValid(value);
  }
  static constexpr STATUS STATUS_MIN =
    NavSatStatus_STATUS_STATUS_MIN;
  static constexpr STATUS STATUS_MAX =
    NavSatStatus_STATUS_STATUS_MAX;
  static constexpr int STATUS_ARRAYSIZE =
    NavSatStatus_STATUS_STATUS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  STATUS_descriptor() {
    return NavSatStatus_STATUS_descriptor();
  }
  template<typename T>
  static inline const std::string& STATUS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, STATUS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function STATUS_Name.");
    return NavSatStatus_STATUS_Name(enum_t_value);
  }
  static inline bool STATUS_Parse(const std::string& name,
      STATUS* value) {
    return NavSatStatus_STATUS_Parse(name, value);
  }

  typedef NavSatStatus_SERVICE SERVICE;
  static constexpr SERVICE NONE =
    NavSatStatus_SERVICE_NONE;
  static constexpr SERVICE SERVICE_GPS =
    NavSatStatus_SERVICE_SERVICE_GPS;
  static constexpr SERVICE SERVICE_GLONASS =
    NavSatStatus_SERVICE_SERVICE_GLONASS;
  static constexpr SERVICE SERVICE_COMPASS =
    NavSatStatus_SERVICE_SERVICE_COMPASS;
  static constexpr SERVICE SERVICE_GALILEO =
    NavSatStatus_SERVICE_SERVICE_GALILEO;
  static inline bool SERVICE_IsValid(int value) {
    return NavSatStatus_SERVICE_IsValid(value);
  }
  static constexpr SERVICE SERVICE_MIN =
    NavSatStatus_SERVICE_SERVICE_MIN;
  static constexpr SERVICE SERVICE_MAX =
    NavSatStatus_SERVICE_SERVICE_MAX;
  static constexpr int SERVICE_ARRAYSIZE =
    NavSatStatus_SERVICE_SERVICE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SERVICE_descriptor() {
    return NavSatStatus_SERVICE_descriptor();
  }
  template<typename T>
  static inline const std::string& SERVICE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SERVICE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SERVICE_Name.");
    return NavSatStatus_SERVICE_Name(enum_t_value);
  }
  static inline bool SERVICE_Parse(const std::string& name,
      SERVICE* value) {
    return NavSatStatus_SERVICE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kServiceFieldNumber = 6,
  };
  // .sensor_msgs.NavSatStatus.STATUS status = 1;
  void clear_status();
  ::sensor_msgs::NavSatStatus_STATUS status() const;
  void set_status(::sensor_msgs::NavSatStatus_STATUS value);
  private:
  ::sensor_msgs::NavSatStatus_STATUS _internal_status() const;
  void _internal_set_status(::sensor_msgs::NavSatStatus_STATUS value);
  public:

  // .sensor_msgs.NavSatStatus.SERVICE service = 6;
  void clear_service();
  ::sensor_msgs::NavSatStatus_SERVICE service() const;
  void set_service(::sensor_msgs::NavSatStatus_SERVICE value);
  private:
  ::sensor_msgs::NavSatStatus_SERVICE _internal_service() const;
  void _internal_set_service(::sensor_msgs::NavSatStatus_SERVICE value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.NavSatStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  int service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class NavSatFix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensor_msgs.NavSatFix) */ {
 public:
  NavSatFix();
  virtual ~NavSatFix();

  NavSatFix(const NavSatFix& from);
  NavSatFix(NavSatFix&& from) noexcept
    : NavSatFix() {
    *this = ::std::move(from);
  }

  inline NavSatFix& operator=(const NavSatFix& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavSatFix& operator=(NavSatFix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavSatFix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavSatFix* internal_default_instance() {
    return reinterpret_cast<const NavSatFix*>(
               &_NavSatFix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NavSatFix& a, NavSatFix& b) {
    a.Swap(&b);
  }
  inline void Swap(NavSatFix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavSatFix* New() const final {
    return CreateMaybeMessage<NavSatFix>(nullptr);
  }

  NavSatFix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavSatFix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavSatFix& from);
  void MergeFrom(const NavSatFix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavSatFix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensor_msgs.NavSatFix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_5fmsgs_2eproto);
    return ::descriptor_table_sensor_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NavSatFix_COVARIANCE_TYPE COVARIANCE_TYPE;
  static constexpr COVARIANCE_TYPE COVARIANCE_TYPE_UNKNOWN =
    NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_UNKNOWN;
  static constexpr COVARIANCE_TYPE COVARIANCE_TYPE_APPROXIMATED =
    NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_APPROXIMATED;
  static constexpr COVARIANCE_TYPE COVARIANCE_TYPE_DIAGONAL_KNOWN =
    NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_DIAGONAL_KNOWN;
  static constexpr COVARIANCE_TYPE COVARIANCE_TYPE_KNOWN =
    NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_KNOWN;
  static inline bool COVARIANCE_TYPE_IsValid(int value) {
    return NavSatFix_COVARIANCE_TYPE_IsValid(value);
  }
  static constexpr COVARIANCE_TYPE COVARIANCE_TYPE_MIN =
    NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_MIN;
  static constexpr COVARIANCE_TYPE COVARIANCE_TYPE_MAX =
    NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_MAX;
  static constexpr int COVARIANCE_TYPE_ARRAYSIZE =
    NavSatFix_COVARIANCE_TYPE_COVARIANCE_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  COVARIANCE_TYPE_descriptor() {
    return NavSatFix_COVARIANCE_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& COVARIANCE_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, COVARIANCE_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function COVARIANCE_TYPE_Name.");
    return NavSatFix_COVARIANCE_TYPE_Name(enum_t_value);
  }
  static inline bool COVARIANCE_TYPE_Parse(const std::string& name,
      COVARIANCE_TYPE* value) {
    return NavSatFix_COVARIANCE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionCovarianceFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kAltitudeFieldNumber = 5,
    kPositionCovarianceTypeFieldNumber = 7,
  };
  // repeated double position_covariance = 6;
  int position_covariance_size() const;
  private:
  int _internal_position_covariance_size() const;
  public:
  void clear_position_covariance();
  private:
  double _internal_position_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position_covariance() const;
  void _internal_add_position_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position_covariance();
  public:
  double position_covariance(int index) const;
  void set_position_covariance(int index, double value);
  void add_position_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position_covariance();

  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // .sensor_msgs.NavSatStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::sensor_msgs::NavSatStatus& status() const;
  ::sensor_msgs::NavSatStatus* release_status();
  ::sensor_msgs::NavSatStatus* mutable_status();
  void set_allocated_status(::sensor_msgs::NavSatStatus* status);
  private:
  const ::sensor_msgs::NavSatStatus& _internal_status() const;
  ::sensor_msgs::NavSatStatus* _internal_mutable_status();
  public:

  // double latitude = 3;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 4;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 5;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // .sensor_msgs.NavSatFix.COVARIANCE_TYPE position_covariance_type = 7;
  void clear_position_covariance_type();
  ::sensor_msgs::NavSatFix_COVARIANCE_TYPE position_covariance_type() const;
  void set_position_covariance_type(::sensor_msgs::NavSatFix_COVARIANCE_TYPE value);
  private:
  ::sensor_msgs::NavSatFix_COVARIANCE_TYPE _internal_position_covariance_type() const;
  void _internal_set_position_covariance_type(::sensor_msgs::NavSatFix_COVARIANCE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:sensor_msgs.NavSatFix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_covariance_;
  mutable std::atomic<int> _position_covariance_cached_byte_size_;
  ::std_msgs::Header* header_;
  ::sensor_msgs::NavSatStatus* status_;
  double latitude_;
  double longitude_;
  double altitude_;
  int position_covariance_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensor_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointField

// string name = 1;
inline void PointField::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PointField::name() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointField.name)
  return _internal_name();
}
inline void PointField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.PointField.name)
}
inline std::string* PointField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.PointField.name)
  return _internal_mutable_name();
}
inline const std::string& PointField::_internal_name() const {
  return name_.GetNoArena();
}
inline void PointField::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PointField::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensor_msgs.PointField.name)
}
inline void PointField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensor_msgs.PointField.name)
}
inline void PointField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensor_msgs.PointField.name)
}
inline std::string* PointField::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PointField::release_name() {
  // @@protoc_insertion_point(field_release:sensor_msgs.PointField.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PointField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.PointField.name)
}

// int32 offset = 2;
inline void PointField::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointField::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointField::offset() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointField.offset)
  return _internal_offset();
}
inline void PointField::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void PointField::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.PointField.offset)
}

// .sensor_msgs.PointField.Type datatype = 3;
inline void PointField::clear_datatype() {
  datatype_ = 0;
}
inline ::sensor_msgs::PointField_Type PointField::_internal_datatype() const {
  return static_cast< ::sensor_msgs::PointField_Type >(datatype_);
}
inline ::sensor_msgs::PointField_Type PointField::datatype() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointField.datatype)
  return _internal_datatype();
}
inline void PointField::_internal_set_datatype(::sensor_msgs::PointField_Type value) {
  
  datatype_ = value;
}
inline void PointField::set_datatype(::sensor_msgs::PointField_Type value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.PointField.datatype)
}

// int32 count = 4;
inline void PointField::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointField::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointField::count() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointField.count)
  return _internal_count();
}
inline void PointField::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void PointField::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.PointField.count)
}

// -------------------------------------------------------------------

// PointCloud

// .std_msgs.Header header = 1;
inline bool PointCloud::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PointCloud::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& PointCloud::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& PointCloud::header() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointCloud.header)
  return _internal_header();
}
inline ::std_msgs::Header* PointCloud::release_header() {
  // @@protoc_insertion_point(field_release:sensor_msgs.PointCloud.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* PointCloud::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* PointCloud::mutable_header() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.PointCloud.header)
  return _internal_mutable_header();
}
inline void PointCloud::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.PointCloud.header)
}

// int32 height = 2;
inline void PointCloud::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud::height() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointCloud.height)
  return _internal_height();
}
inline void PointCloud::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void PointCloud::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.PointCloud.height)
}

// int32 width = 3;
inline void PointCloud::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud::width() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointCloud.width)
  return _internal_width();
}
inline void PointCloud::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void PointCloud::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.PointCloud.width)
}

// int32 fields_num = 4;
inline void PointCloud::clear_fields_num() {
  fields_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud::_internal_fields_num() const {
  return fields_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud::fields_num() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointCloud.fields_num)
  return _internal_fields_num();
}
inline void PointCloud::_internal_set_fields_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fields_num_ = value;
}
inline void PointCloud::set_fields_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fields_num(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.PointCloud.fields_num)
}

// repeated .sensor_msgs.PointField fields = 5;
inline int PointCloud::_internal_fields_size() const {
  return fields_.size();
}
inline int PointCloud::fields_size() const {
  return _internal_fields_size();
}
inline void PointCloud::clear_fields() {
  fields_.Clear();
}
inline ::sensor_msgs::PointField* PointCloud::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.PointCloud.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensor_msgs::PointField >*
PointCloud::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.PointCloud.fields)
  return &fields_;
}
inline const ::sensor_msgs::PointField& PointCloud::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::sensor_msgs::PointField& PointCloud::fields(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.PointCloud.fields)
  return _internal_fields(index);
}
inline ::sensor_msgs::PointField* PointCloud::_internal_add_fields() {
  return fields_.Add();
}
inline ::sensor_msgs::PointField* PointCloud::add_fields() {
  // @@protoc_insertion_point(field_add:sensor_msgs.PointCloud.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sensor_msgs::PointField >&
PointCloud::fields() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.PointCloud.fields)
  return fields_;
}

// -------------------------------------------------------------------

// LaserScan

// .std_msgs.Header header = 1;
inline bool LaserScan::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LaserScan::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& LaserScan::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& LaserScan::header() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.header)
  return _internal_header();
}
inline ::std_msgs::Header* LaserScan::release_header() {
  // @@protoc_insertion_point(field_release:sensor_msgs.LaserScan.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* LaserScan::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* LaserScan::mutable_header() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.LaserScan.header)
  return _internal_mutable_header();
}
inline void LaserScan::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.LaserScan.header)
}

// float angle_min = 2;
inline void LaserScan::clear_angle_min() {
  angle_min_ = 0;
}
inline float LaserScan::_internal_angle_min() const {
  return angle_min_;
}
inline float LaserScan::angle_min() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.angle_min)
  return _internal_angle_min();
}
inline void LaserScan::_internal_set_angle_min(float value) {
  
  angle_min_ = value;
}
inline void LaserScan::set_angle_min(float value) {
  _internal_set_angle_min(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.angle_min)
}

// float angle_max = 3;
inline void LaserScan::clear_angle_max() {
  angle_max_ = 0;
}
inline float LaserScan::_internal_angle_max() const {
  return angle_max_;
}
inline float LaserScan::angle_max() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.angle_max)
  return _internal_angle_max();
}
inline void LaserScan::_internal_set_angle_max(float value) {
  
  angle_max_ = value;
}
inline void LaserScan::set_angle_max(float value) {
  _internal_set_angle_max(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.angle_max)
}

// float angle_increment = 4;
inline void LaserScan::clear_angle_increment() {
  angle_increment_ = 0;
}
inline float LaserScan::_internal_angle_increment() const {
  return angle_increment_;
}
inline float LaserScan::angle_increment() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.angle_increment)
  return _internal_angle_increment();
}
inline void LaserScan::_internal_set_angle_increment(float value) {
  
  angle_increment_ = value;
}
inline void LaserScan::set_angle_increment(float value) {
  _internal_set_angle_increment(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.angle_increment)
}

// float time_increment = 5;
inline void LaserScan::clear_time_increment() {
  time_increment_ = 0;
}
inline float LaserScan::_internal_time_increment() const {
  return time_increment_;
}
inline float LaserScan::time_increment() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.time_increment)
  return _internal_time_increment();
}
inline void LaserScan::_internal_set_time_increment(float value) {
  
  time_increment_ = value;
}
inline void LaserScan::set_time_increment(float value) {
  _internal_set_time_increment(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.time_increment)
}

// float scan_time = 6;
inline void LaserScan::clear_scan_time() {
  scan_time_ = 0;
}
inline float LaserScan::_internal_scan_time() const {
  return scan_time_;
}
inline float LaserScan::scan_time() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.scan_time)
  return _internal_scan_time();
}
inline void LaserScan::_internal_set_scan_time(float value) {
  
  scan_time_ = value;
}
inline void LaserScan::set_scan_time(float value) {
  _internal_set_scan_time(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.scan_time)
}

// float range_min = 7;
inline void LaserScan::clear_range_min() {
  range_min_ = 0;
}
inline float LaserScan::_internal_range_min() const {
  return range_min_;
}
inline float LaserScan::range_min() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.range_min)
  return _internal_range_min();
}
inline void LaserScan::_internal_set_range_min(float value) {
  
  range_min_ = value;
}
inline void LaserScan::set_range_min(float value) {
  _internal_set_range_min(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.range_min)
}

// float range_max = 8;
inline void LaserScan::clear_range_max() {
  range_max_ = 0;
}
inline float LaserScan::_internal_range_max() const {
  return range_max_;
}
inline float LaserScan::range_max() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.range_max)
  return _internal_range_max();
}
inline void LaserScan::_internal_set_range_max(float value) {
  
  range_max_ = value;
}
inline void LaserScan::set_range_max(float value) {
  _internal_set_range_max(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.range_max)
}

// repeated float ranges = 9;
inline int LaserScan::_internal_ranges_size() const {
  return ranges_.size();
}
inline int LaserScan::ranges_size() const {
  return _internal_ranges_size();
}
inline void LaserScan::clear_ranges() {
  ranges_.Clear();
}
inline float LaserScan::_internal_ranges(int index) const {
  return ranges_.Get(index);
}
inline float LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.ranges)
  return _internal_ranges(index);
}
inline void LaserScan::set_ranges(int index, float value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.ranges)
}
inline void LaserScan::_internal_add_ranges(float value) {
  ranges_.Add(value);
}
inline void LaserScan::add_ranges(float value) {
  _internal_add_ranges(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.LaserScan.ranges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LaserScan::_internal_ranges() const {
  return ranges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.LaserScan.ranges)
  return _internal_ranges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LaserScan::_internal_mutable_ranges() {
  return &ranges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.LaserScan.ranges)
  return _internal_mutable_ranges();
}

// repeated float intensities = 10;
inline int LaserScan::_internal_intensities_size() const {
  return intensities_.size();
}
inline int LaserScan::intensities_size() const {
  return _internal_intensities_size();
}
inline void LaserScan::clear_intensities() {
  intensities_.Clear();
}
inline float LaserScan::_internal_intensities(int index) const {
  return intensities_.Get(index);
}
inline float LaserScan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.LaserScan.intensities)
  return _internal_intensities(index);
}
inline void LaserScan::set_intensities(int index, float value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.LaserScan.intensities)
}
inline void LaserScan::_internal_add_intensities(float value) {
  intensities_.Add(value);
}
inline void LaserScan::add_intensities(float value) {
  _internal_add_intensities(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.LaserScan.intensities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LaserScan::_internal_intensities() const {
  return intensities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LaserScan::intensities() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.LaserScan.intensities)
  return _internal_intensities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LaserScan::_internal_mutable_intensities() {
  return &intensities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LaserScan::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.LaserScan.intensities)
  return _internal_mutable_intensities();
}

// -------------------------------------------------------------------

// Imu

// .std_msgs.Header header = 1;
inline bool Imu::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Imu::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& Imu::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& Imu::header() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Imu.header)
  return _internal_header();
}
inline ::std_msgs::Header* Imu::release_header() {
  // @@protoc_insertion_point(field_release:sensor_msgs.Imu.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* Imu::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* Imu::mutable_header() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.Imu.header)
  return _internal_mutable_header();
}
inline void Imu::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.Imu.header)
}

// .geometry_msgs.Quaternion orientation = 2;
inline bool Imu::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Imu::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::geometry_msgs::Quaternion& Imu::_internal_orientation() const {
  const ::geometry_msgs::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Quaternion*>(
      &::geometry_msgs::_Quaternion_default_instance_);
}
inline const ::geometry_msgs::Quaternion& Imu::orientation() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Imu.orientation)
  return _internal_orientation();
}
inline ::geometry_msgs::Quaternion* Imu::release_orientation() {
  // @@protoc_insertion_point(field_release:sensor_msgs.Imu.orientation)
  
  ::geometry_msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Quaternion* Imu::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::geometry_msgs::Quaternion* Imu::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.Imu.orientation)
  return _internal_mutable_orientation();
}
inline void Imu::set_allocated_orientation(::geometry_msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.Imu.orientation)
}

// repeated double orientation_covariance = 3;
inline int Imu::_internal_orientation_covariance_size() const {
  return orientation_covariance_.size();
}
inline int Imu::orientation_covariance_size() const {
  return _internal_orientation_covariance_size();
}
inline void Imu::clear_orientation_covariance() {
  orientation_covariance_.Clear();
}
inline double Imu::_internal_orientation_covariance(int index) const {
  return orientation_covariance_.Get(index);
}
inline double Imu::orientation_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Imu.orientation_covariance)
  return _internal_orientation_covariance(index);
}
inline void Imu::set_orientation_covariance(int index, double value) {
  orientation_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Imu.orientation_covariance)
}
inline void Imu::_internal_add_orientation_covariance(double value) {
  orientation_covariance_.Add(value);
}
inline void Imu::add_orientation_covariance(double value) {
  _internal_add_orientation_covariance(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.Imu.orientation_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::_internal_orientation_covariance() const {
  return orientation_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::orientation_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.Imu.orientation_covariance)
  return _internal_orientation_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::_internal_mutable_orientation_covariance() {
  return &orientation_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::mutable_orientation_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.Imu.orientation_covariance)
  return _internal_mutable_orientation_covariance();
}

// .geometry_msgs.Vector3 angular_velocity = 4;
inline bool Imu::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool Imu::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::geometry_msgs::Vector3& Imu::_internal_angular_velocity() const {
  const ::geometry_msgs::Vector3* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Vector3*>(
      &::geometry_msgs::_Vector3_default_instance_);
}
inline const ::geometry_msgs::Vector3& Imu::angular_velocity() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Imu.angular_velocity)
  return _internal_angular_velocity();
}
inline ::geometry_msgs::Vector3* Imu::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:sensor_msgs.Imu.angular_velocity)
  
  ::geometry_msgs::Vector3* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Vector3* Imu::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Vector3>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::geometry_msgs::Vector3* Imu::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.Imu.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void Imu::set_allocated_angular_velocity(::geometry_msgs::Vector3* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.Imu.angular_velocity)
}

// repeated double angular_velocity_covariance = 5;
inline int Imu::_internal_angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
inline int Imu::angular_velocity_covariance_size() const {
  return _internal_angular_velocity_covariance_size();
}
inline void Imu::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
inline double Imu::_internal_angular_velocity_covariance(int index) const {
  return angular_velocity_covariance_.Get(index);
}
inline double Imu::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Imu.angular_velocity_covariance)
  return _internal_angular_velocity_covariance(index);
}
inline void Imu::set_angular_velocity_covariance(int index, double value) {
  angular_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Imu.angular_velocity_covariance)
}
inline void Imu::_internal_add_angular_velocity_covariance(double value) {
  angular_velocity_covariance_.Add(value);
}
inline void Imu::add_angular_velocity_covariance(double value) {
  _internal_add_angular_velocity_covariance(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.Imu.angular_velocity_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::_internal_angular_velocity_covariance() const {
  return angular_velocity_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.Imu.angular_velocity_covariance)
  return _internal_angular_velocity_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::_internal_mutable_angular_velocity_covariance() {
  return &angular_velocity_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.Imu.angular_velocity_covariance)
  return _internal_mutable_angular_velocity_covariance();
}

// .geometry_msgs.Vector3 linear_acceleration = 6;
inline bool Imu::_internal_has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != nullptr;
}
inline bool Imu::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline const ::geometry_msgs::Vector3& Imu::_internal_linear_acceleration() const {
  const ::geometry_msgs::Vector3* p = linear_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Vector3*>(
      &::geometry_msgs::_Vector3_default_instance_);
}
inline const ::geometry_msgs::Vector3& Imu::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Imu.linear_acceleration)
  return _internal_linear_acceleration();
}
inline ::geometry_msgs::Vector3* Imu::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:sensor_msgs.Imu.linear_acceleration)
  
  ::geometry_msgs::Vector3* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Vector3* Imu::_internal_mutable_linear_acceleration() {
  
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Vector3>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::geometry_msgs::Vector3* Imu::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.Imu.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void Imu::set_allocated_linear_acceleration(::geometry_msgs::Vector3* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.Imu.linear_acceleration)
}

// repeated double linear_acceleration_covariance = 7;
inline int Imu::_internal_linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
inline int Imu::linear_acceleration_covariance_size() const {
  return _internal_linear_acceleration_covariance_size();
}
inline void Imu::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
inline double Imu::_internal_linear_acceleration_covariance(int index) const {
  return linear_acceleration_covariance_.Get(index);
}
inline double Imu::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Imu.linear_acceleration_covariance)
  return _internal_linear_acceleration_covariance(index);
}
inline void Imu::set_linear_acceleration_covariance(int index, double value) {
  linear_acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Imu.linear_acceleration_covariance)
}
inline void Imu::_internal_add_linear_acceleration_covariance(double value) {
  linear_acceleration_covariance_.Add(value);
}
inline void Imu::add_linear_acceleration_covariance(double value) {
  _internal_add_linear_acceleration_covariance(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.Imu.linear_acceleration_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::_internal_linear_acceleration_covariance() const {
  return linear_acceleration_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Imu::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.Imu.linear_acceleration_covariance)
  return _internal_linear_acceleration_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::_internal_mutable_linear_acceleration_covariance() {
  return &linear_acceleration_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Imu::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.Imu.linear_acceleration_covariance)
  return _internal_mutable_linear_acceleration_covariance();
}

// -------------------------------------------------------------------

// Image

// .std_msgs.Header header = 1;
inline bool Image::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Image::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& Image::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& Image::header() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Image.header)
  return _internal_header();
}
inline ::std_msgs::Header* Image::release_header() {
  // @@protoc_insertion_point(field_release:sensor_msgs.Image.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* Image::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* Image::mutable_header() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.Image.header)
  return _internal_mutable_header();
}
inline void Image::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.Image.header)
}

// uint32 height = 2;
inline void Image::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::height() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Image.height)
}

// uint32 width = 3;
inline void Image::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::width() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Image.width)
}

// string encoding = 4;
inline void Image::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::encoding() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Image.encoding)
  return _internal_encoding();
}
inline void Image::set_encoding(const std::string& value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Image.encoding)
}
inline std::string* Image::mutable_encoding() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.Image.encoding)
  return _internal_mutable_encoding();
}
inline const std::string& Image::_internal_encoding() const {
  return encoding_.GetNoArena();
}
inline void Image::_internal_set_encoding(const std::string& value) {
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_encoding(std::string&& value) {
  
  encoding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensor_msgs.Image.encoding)
}
inline void Image::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensor_msgs.Image.encoding)
}
inline void Image::set_encoding(const char* value, size_t size) {
  
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensor_msgs.Image.encoding)
}
inline std::string* Image::_internal_mutable_encoding() {
  
  return encoding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_encoding() {
  // @@protoc_insertion_point(field_release:sensor_msgs.Image.encoding)
  
  return encoding_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    
  } else {
    
  }
  encoding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.Image.encoding)
}

// bool is_bigendian = 5;
inline void Image::clear_is_bigendian() {
  is_bigendian_ = false;
}
inline bool Image::_internal_is_bigendian() const {
  return is_bigendian_;
}
inline bool Image::is_bigendian() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Image.is_bigendian)
  return _internal_is_bigendian();
}
inline void Image::_internal_set_is_bigendian(bool value) {
  
  is_bigendian_ = value;
}
inline void Image::set_is_bigendian(bool value) {
  _internal_set_is_bigendian(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Image.is_bigendian)
}

// uint32 step = 6;
inline void Image::clear_step() {
  step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Image::step() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Image.step)
  return _internal_step();
}
inline void Image::_internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  step_ = value;
}
inline void Image::set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Image.step)
}

// bytes data = 7;
inline void Image::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.Image.data)
  return _internal_data();
}
inline void Image::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.Image.data)
}
inline std::string* Image::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.Image.data)
  return _internal_mutable_data();
}
inline const std::string& Image::_internal_data() const {
  return data_.GetNoArena();
}
inline void Image::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Image::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensor_msgs.Image.data)
}
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensor_msgs.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensor_msgs.Image.data)
}
inline std::string* Image::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:sensor_msgs.Image.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.Image.data)
}

// -------------------------------------------------------------------

// CompressedImage

// .std_msgs.Header header = 1;
inline bool CompressedImage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CompressedImage::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& CompressedImage::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& CompressedImage::header() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.CompressedImage.header)
  return _internal_header();
}
inline ::std_msgs::Header* CompressedImage::release_header() {
  // @@protoc_insertion_point(field_release:sensor_msgs.CompressedImage.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* CompressedImage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* CompressedImage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.CompressedImage.header)
  return _internal_mutable_header();
}
inline void CompressedImage::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.CompressedImage.header)
}

// string format = 2;
inline void CompressedImage::clear_format() {
  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompressedImage::format() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.CompressedImage.format)
  return _internal_format();
}
inline void CompressedImage::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.CompressedImage.format)
}
inline std::string* CompressedImage::mutable_format() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.CompressedImage.format)
  return _internal_mutable_format();
}
inline const std::string& CompressedImage::_internal_format() const {
  return format_.GetNoArena();
}
inline void CompressedImage::_internal_set_format(const std::string& value) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompressedImage::set_format(std::string&& value) {
  
  format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensor_msgs.CompressedImage.format)
}
inline void CompressedImage::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensor_msgs.CompressedImage.format)
}
inline void CompressedImage::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensor_msgs.CompressedImage.format)
}
inline std::string* CompressedImage::_internal_mutable_format() {
  
  return format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompressedImage::release_format() {
  // @@protoc_insertion_point(field_release:sensor_msgs.CompressedImage.format)
  
  return format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedImage::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.CompressedImage.format)
}

// int64 size = 3;
inline void CompressedImage::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompressedImage::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompressedImage::size() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.CompressedImage.size)
  return _internal_size();
}
inline void CompressedImage::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void CompressedImage::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.CompressedImage.size)
}

// bytes data = 4;
inline void CompressedImage::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompressedImage::data() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.CompressedImage.data)
  return _internal_data();
}
inline void CompressedImage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.CompressedImage.data)
}
inline std::string* CompressedImage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.CompressedImage.data)
  return _internal_mutable_data();
}
inline const std::string& CompressedImage::_internal_data() const {
  return data_.GetNoArena();
}
inline void CompressedImage::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompressedImage::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensor_msgs.CompressedImage.data)
}
inline void CompressedImage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensor_msgs.CompressedImage.data)
}
inline void CompressedImage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensor_msgs.CompressedImage.data)
}
inline std::string* CompressedImage::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompressedImage::release_data() {
  // @@protoc_insertion_point(field_release:sensor_msgs.CompressedImage.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompressedImage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.CompressedImage.data)
}

// -------------------------------------------------------------------

// DiffEncoder

// .std_msgs.Header header = 1;
inline bool DiffEncoder::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DiffEncoder::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& DiffEncoder::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& DiffEncoder::header() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.DiffEncoder.header)
  return _internal_header();
}
inline ::std_msgs::Header* DiffEncoder::release_header() {
  // @@protoc_insertion_point(field_release:sensor_msgs.DiffEncoder.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* DiffEncoder::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* DiffEncoder::mutable_header() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.DiffEncoder.header)
  return _internal_mutable_header();
}
inline void DiffEncoder::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.DiffEncoder.header)
}

// float left_encoder = 2;
inline void DiffEncoder::clear_left_encoder() {
  left_encoder_ = 0;
}
inline float DiffEncoder::_internal_left_encoder() const {
  return left_encoder_;
}
inline float DiffEncoder::left_encoder() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.DiffEncoder.left_encoder)
  return _internal_left_encoder();
}
inline void DiffEncoder::_internal_set_left_encoder(float value) {
  
  left_encoder_ = value;
}
inline void DiffEncoder::set_left_encoder(float value) {
  _internal_set_left_encoder(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.DiffEncoder.left_encoder)
}

// float right_encoder = 3;
inline void DiffEncoder::clear_right_encoder() {
  right_encoder_ = 0;
}
inline float DiffEncoder::_internal_right_encoder() const {
  return right_encoder_;
}
inline float DiffEncoder::right_encoder() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.DiffEncoder.right_encoder)
  return _internal_right_encoder();
}
inline void DiffEncoder::_internal_set_right_encoder(float value) {
  
  right_encoder_ = value;
}
inline void DiffEncoder::set_right_encoder(float value) {
  _internal_set_right_encoder(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.DiffEncoder.right_encoder)
}

// -------------------------------------------------------------------

// NavSatStatus

// .sensor_msgs.NavSatStatus.STATUS status = 1;
inline void NavSatStatus::clear_status() {
  status_ = 0;
}
inline ::sensor_msgs::NavSatStatus_STATUS NavSatStatus::_internal_status() const {
  return static_cast< ::sensor_msgs::NavSatStatus_STATUS >(status_);
}
inline ::sensor_msgs::NavSatStatus_STATUS NavSatStatus::status() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatStatus.status)
  return _internal_status();
}
inline void NavSatStatus::_internal_set_status(::sensor_msgs::NavSatStatus_STATUS value) {
  
  status_ = value;
}
inline void NavSatStatus::set_status(::sensor_msgs::NavSatStatus_STATUS value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.NavSatStatus.status)
}

// .sensor_msgs.NavSatStatus.SERVICE service = 6;
inline void NavSatStatus::clear_service() {
  service_ = 0;
}
inline ::sensor_msgs::NavSatStatus_SERVICE NavSatStatus::_internal_service() const {
  return static_cast< ::sensor_msgs::NavSatStatus_SERVICE >(service_);
}
inline ::sensor_msgs::NavSatStatus_SERVICE NavSatStatus::service() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatStatus.service)
  return _internal_service();
}
inline void NavSatStatus::_internal_set_service(::sensor_msgs::NavSatStatus_SERVICE value) {
  
  service_ = value;
}
inline void NavSatStatus::set_service(::sensor_msgs::NavSatStatus_SERVICE value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.NavSatStatus.service)
}

// -------------------------------------------------------------------

// NavSatFix

// .std_msgs.Header header = 1;
inline bool NavSatFix::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NavSatFix::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& NavSatFix::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& NavSatFix::header() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatFix.header)
  return _internal_header();
}
inline ::std_msgs::Header* NavSatFix::release_header() {
  // @@protoc_insertion_point(field_release:sensor_msgs.NavSatFix.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* NavSatFix::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* NavSatFix::mutable_header() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.NavSatFix.header)
  return _internal_mutable_header();
}
inline void NavSatFix::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.NavSatFix.header)
}

// .sensor_msgs.NavSatStatus status = 2;
inline bool NavSatFix::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool NavSatFix::has_status() const {
  return _internal_has_status();
}
inline void NavSatFix::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::sensor_msgs::NavSatStatus& NavSatFix::_internal_status() const {
  const ::sensor_msgs::NavSatStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensor_msgs::NavSatStatus*>(
      &::sensor_msgs::_NavSatStatus_default_instance_);
}
inline const ::sensor_msgs::NavSatStatus& NavSatFix::status() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatFix.status)
  return _internal_status();
}
inline ::sensor_msgs::NavSatStatus* NavSatFix::release_status() {
  // @@protoc_insertion_point(field_release:sensor_msgs.NavSatFix.status)
  
  ::sensor_msgs::NavSatStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::sensor_msgs::NavSatStatus* NavSatFix::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensor_msgs::NavSatStatus>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::sensor_msgs::NavSatStatus* NavSatFix::mutable_status() {
  // @@protoc_insertion_point(field_mutable:sensor_msgs.NavSatFix.status)
  return _internal_mutable_status();
}
inline void NavSatFix::set_allocated_status(::sensor_msgs::NavSatStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:sensor_msgs.NavSatFix.status)
}

// double latitude = 3;
inline void NavSatFix::clear_latitude() {
  latitude_ = 0;
}
inline double NavSatFix::_internal_latitude() const {
  return latitude_;
}
inline double NavSatFix::latitude() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatFix.latitude)
  return _internal_latitude();
}
inline void NavSatFix::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void NavSatFix::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.NavSatFix.latitude)
}

// double longitude = 4;
inline void NavSatFix::clear_longitude() {
  longitude_ = 0;
}
inline double NavSatFix::_internal_longitude() const {
  return longitude_;
}
inline double NavSatFix::longitude() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatFix.longitude)
  return _internal_longitude();
}
inline void NavSatFix::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void NavSatFix::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.NavSatFix.longitude)
}

// double altitude = 5;
inline void NavSatFix::clear_altitude() {
  altitude_ = 0;
}
inline double NavSatFix::_internal_altitude() const {
  return altitude_;
}
inline double NavSatFix::altitude() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatFix.altitude)
  return _internal_altitude();
}
inline void NavSatFix::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void NavSatFix::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.NavSatFix.altitude)
}

// repeated double position_covariance = 6;
inline int NavSatFix::_internal_position_covariance_size() const {
  return position_covariance_.size();
}
inline int NavSatFix::position_covariance_size() const {
  return _internal_position_covariance_size();
}
inline void NavSatFix::clear_position_covariance() {
  position_covariance_.Clear();
}
inline double NavSatFix::_internal_position_covariance(int index) const {
  return position_covariance_.Get(index);
}
inline double NavSatFix::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatFix.position_covariance)
  return _internal_position_covariance(index);
}
inline void NavSatFix::set_position_covariance(int index, double value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_msgs.NavSatFix.position_covariance)
}
inline void NavSatFix::_internal_add_position_covariance(double value) {
  position_covariance_.Add(value);
}
inline void NavSatFix::add_position_covariance(double value) {
  _internal_add_position_covariance(value);
  // @@protoc_insertion_point(field_add:sensor_msgs.NavSatFix.position_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NavSatFix::_internal_position_covariance() const {
  return position_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NavSatFix::position_covariance() const {
  // @@protoc_insertion_point(field_list:sensor_msgs.NavSatFix.position_covariance)
  return _internal_position_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NavSatFix::_internal_mutable_position_covariance() {
  return &position_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NavSatFix::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:sensor_msgs.NavSatFix.position_covariance)
  return _internal_mutable_position_covariance();
}

// .sensor_msgs.NavSatFix.COVARIANCE_TYPE position_covariance_type = 7;
inline void NavSatFix::clear_position_covariance_type() {
  position_covariance_type_ = 0;
}
inline ::sensor_msgs::NavSatFix_COVARIANCE_TYPE NavSatFix::_internal_position_covariance_type() const {
  return static_cast< ::sensor_msgs::NavSatFix_COVARIANCE_TYPE >(position_covariance_type_);
}
inline ::sensor_msgs::NavSatFix_COVARIANCE_TYPE NavSatFix::position_covariance_type() const {
  // @@protoc_insertion_point(field_get:sensor_msgs.NavSatFix.position_covariance_type)
  return _internal_position_covariance_type();
}
inline void NavSatFix::_internal_set_position_covariance_type(::sensor_msgs::NavSatFix_COVARIANCE_TYPE value) {
  
  position_covariance_type_ = value;
}
inline void NavSatFix::set_position_covariance_type(::sensor_msgs::NavSatFix_COVARIANCE_TYPE value) {
  _internal_set_position_covariance_type(value);
  // @@protoc_insertion_point(field_set:sensor_msgs.NavSatFix.position_covariance_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sensor_msgs::PointField_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensor_msgs::PointField_Type>() {
  return ::sensor_msgs::PointField_Type_descriptor();
}
template <> struct is_proto_enum< ::sensor_msgs::NavSatStatus_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensor_msgs::NavSatStatus_STATUS>() {
  return ::sensor_msgs::NavSatStatus_STATUS_descriptor();
}
template <> struct is_proto_enum< ::sensor_msgs::NavSatStatus_SERVICE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensor_msgs::NavSatStatus_SERVICE>() {
  return ::sensor_msgs::NavSatStatus_SERVICE_descriptor();
}
template <> struct is_proto_enum< ::sensor_msgs::NavSatFix_COVARIANCE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensor_msgs::NavSatFix_COVARIANCE_TYPE>() {
  return ::sensor_msgs::NavSatFix_COVARIANCE_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_5fmsgs_2eproto
