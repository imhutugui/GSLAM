// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_msgs.proto

#include "sensor_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_geometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_geometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_geometry_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_geometry_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavSatStatus_sensor_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensor_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointField_sensor_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_std_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_std_5fmsgs_2eproto;
namespace sensor_msgs {
class PointFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointField> _instance;
} _PointField_default_instance_;
class PointCloudDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointCloud> _instance;
} _PointCloud_default_instance_;
class LaserScanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaserScan> _instance;
} _LaserScan_default_instance_;
class ImuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Imu> _instance;
} _Imu_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class CompressedImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompressedImage> _instance;
} _CompressedImage_default_instance_;
class DiffEncoderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiffEncoder> _instance;
} _DiffEncoder_default_instance_;
class NavSatStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavSatStatus> _instance;
} _NavSatStatus_default_instance_;
class NavSatFixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavSatFix> _instance;
} _NavSatFix_default_instance_;
}  // namespace sensor_msgs
static void InitDefaultsscc_info_CompressedImage_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_CompressedImage_default_instance_;
    new (ptr) ::sensor_msgs::CompressedImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::CompressedImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompressedImage_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CompressedImage_sensor_5fmsgs_2eproto}, {
      &scc_info_Header_std_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_DiffEncoder_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_DiffEncoder_default_instance_;
    new (ptr) ::sensor_msgs::DiffEncoder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::DiffEncoder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiffEncoder_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiffEncoder_sensor_5fmsgs_2eproto}, {
      &scc_info_Header_std_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Image_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_Image_default_instance_;
    new (ptr) ::sensor_msgs::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Image_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Image_sensor_5fmsgs_2eproto}, {
      &scc_info_Header_std_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_Imu_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_Imu_default_instance_;
    new (ptr) ::sensor_msgs::Imu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::Imu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Imu_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Imu_sensor_5fmsgs_2eproto}, {
      &scc_info_Header_std_5fmsgs_2eproto.base,
      &scc_info_Quaternion_geometry_5fmsgs_2eproto.base,
      &scc_info_Vector3_geometry_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_LaserScan_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_LaserScan_default_instance_;
    new (ptr) ::sensor_msgs::LaserScan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::LaserScan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaserScan_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LaserScan_sensor_5fmsgs_2eproto}, {
      &scc_info_Header_std_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_NavSatFix_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_NavSatFix_default_instance_;
    new (ptr) ::sensor_msgs::NavSatFix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::NavSatFix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NavSatFix_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NavSatFix_sensor_5fmsgs_2eproto}, {
      &scc_info_Header_std_5fmsgs_2eproto.base,
      &scc_info_NavSatStatus_sensor_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_NavSatStatus_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_NavSatStatus_default_instance_;
    new (ptr) ::sensor_msgs::NavSatStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::NavSatStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavSatStatus_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NavSatStatus_sensor_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_PointCloud_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_PointCloud_default_instance_;
    new (ptr) ::sensor_msgs::PointCloud();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::PointCloud::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PointCloud_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PointCloud_sensor_5fmsgs_2eproto}, {
      &scc_info_Header_std_5fmsgs_2eproto.base,
      &scc_info_PointField_sensor_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_PointField_sensor_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensor_msgs::_PointField_default_instance_;
    new (ptr) ::sensor_msgs::PointField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_msgs::PointField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointField_sensor_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointField_sensor_5fmsgs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensor_5fmsgs_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sensor_5fmsgs_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensor_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensor_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointField, name_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointField, offset_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointField, datatype_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointField, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointCloud, header_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointCloud, height_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointCloud, width_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointCloud, fields_num_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::PointCloud, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, header_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, angle_min_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, angle_max_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, angle_increment_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, time_increment_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, scan_time_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, range_min_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, range_max_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, ranges_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::LaserScan, intensities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Imu, header_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Imu, orientation_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Imu, orientation_covariance_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Imu, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Imu, angular_velocity_covariance_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Imu, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Imu, linear_acceleration_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Image, header_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Image, height_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Image, width_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Image, encoding_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Image, is_bigendian_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Image, step_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::Image, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::CompressedImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::CompressedImage, header_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::CompressedImage, format_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::CompressedImage, size_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::CompressedImage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::DiffEncoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::DiffEncoder, header_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::DiffEncoder, left_encoder_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::DiffEncoder, right_encoder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatStatus, status_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatStatus, service_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatFix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatFix, header_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatFix, status_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatFix, latitude_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatFix, longitude_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatFix, altitude_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatFix, position_covariance_),
  PROTOBUF_FIELD_OFFSET(::sensor_msgs::NavSatFix, position_covariance_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensor_msgs::PointField)},
  { 9, -1, sizeof(::sensor_msgs::PointCloud)},
  { 19, -1, sizeof(::sensor_msgs::LaserScan)},
  { 34, -1, sizeof(::sensor_msgs::Imu)},
  { 46, -1, sizeof(::sensor_msgs::Image)},
  { 58, -1, sizeof(::sensor_msgs::CompressedImage)},
  { 67, -1, sizeof(::sensor_msgs::DiffEncoder)},
  { 75, -1, sizeof(::sensor_msgs::NavSatStatus)},
  { 82, -1, sizeof(::sensor_msgs::NavSatFix)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_PointField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_PointCloud_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_LaserScan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_Imu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_CompressedImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_DiffEncoder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_NavSatStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensor_msgs::_NavSatFix_default_instance_),
};

const char descriptor_table_protodef_sensor_5fmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021sensor_msgs.proto\022\013sensor_msgs\032\016std_ms"
  "gs.proto\032\023geometry_msgs.proto\"\330\001\n\nPointF"
  "ield\022\014\n\004name\030\001 \001(\t\022\016\n\006offset\030\002 \001(\005\022.\n\010da"
  "tatype\030\003 \001(\0162\034.sensor_msgs.PointField.Ty"
  "pe\022\r\n\005count\030\004 \001(\005\"m\n\004Type\022\010\n\004BYTE\020\000\022\010\n\004I"
  "NT8\020\001\022\t\n\005UINT8\020\002\022\t\n\005INT16\020\003\022\n\n\006UINT16\020\004\022"
  "\t\n\005INT32\020\005\022\n\n\006UINT32\020\006\022\013\n\007FLOAT32\020\007\022\013\n\007F"
  "LOAT64\020\010\"\212\001\n\nPointCloud\022 \n\006header\030\001 \001(\0132"
  "\020.std_msgs.Header\022\016\n\006height\030\002 \001(\005\022\r\n\005wid"
  "th\030\003 \001(\005\022\022\n\nfields_num\030\004 \001(\005\022\'\n\006fields\030\005"
  " \003(\0132\027.sensor_msgs.PointField\"\342\001\n\tLaserS"
  "can\022 \n\006header\030\001 \001(\0132\020.std_msgs.Header\022\021\n"
  "\tangle_min\030\002 \001(\002\022\021\n\tangle_max\030\003 \001(\002\022\027\n\017a"
  "ngle_increment\030\004 \001(\002\022\026\n\016time_increment\030\005"
  " \001(\002\022\021\n\tscan_time\030\006 \001(\002\022\021\n\trange_min\030\007 \001"
  "(\002\022\021\n\trange_max\030\010 \001(\002\022\016\n\006ranges\030\t \003(\002\022\023\n"
  "\013intensities\030\n \003(\002\"\253\002\n\003Imu\022 \n\006header\030\001 \001"
  "(\0132\020.std_msgs.Header\022.\n\013orientation\030\002 \001("
  "\0132\031.geometry_msgs.Quaternion\022\036\n\026orientat"
  "ion_covariance\030\003 \003(\001\0220\n\020angular_velocity"
  "\030\004 \001(\0132\026.geometry_msgs.Vector3\022#\n\033angula"
  "r_velocity_covariance\030\005 \003(\001\0223\n\023linear_ac"
  "celeration\030\006 \001(\0132\026.geometry_msgs.Vector3"
  "\022&\n\036linear_acceleration_covariance\030\007 \003(\001"
  "\"\214\001\n\005Image\022 \n\006header\030\001 \001(\0132\020.std_msgs.He"
  "ader\022\016\n\006height\030\002 \001(\r\022\r\n\005width\030\003 \001(\r\022\020\n\010e"
  "ncoding\030\004 \001(\t\022\024\n\014is_bigendian\030\005 \001(\010\022\014\n\004s"
  "tep\030\006 \001(\r\022\014\n\004data\030\007 \001(\014\"_\n\017CompressedIma"
  "ge\022 \n\006header\030\001 \001(\0132\020.std_msgs.Header\022\016\n\006"
  "format\030\002 \001(\t\022\014\n\004size\030\003 \001(\003\022\014\n\004data\030\004 \001(\014"
  "\"\\\n\013DiffEncoder\022 \n\006header\030\001 \001(\0132\020.std_ms"
  "gs.Header\022\024\n\014left_encoder\030\002 \001(\002\022\025\n\rright"
  "_encoder\030\003 \001(\002\"\260\002\n\014NavSatStatus\0220\n\006statu"
  "s\030\001 \001(\0162 .sensor_msgs.NavSatStatus.STATU"
  "S\0222\n\007service\030\006 \001(\0162!.sensor_msgs.NavSatS"
  "tatus.SERVICE\"U\n\006STATUS\022\021\n\rSTATUS_NO_FIX"
  "\020\000\022\016\n\nSTATUS_FIX\020\001\022\023\n\017STATUS_SBAS_FIX\020\002\022"
  "\023\n\017STATUS_GBAS_FIX\020\003\"c\n\007SERVICE\022\010\n\004NONE\020"
  "\000\022\017\n\013SERVICE_GPS\020\001\022\023\n\017SERVICE_GLONASS\020\002\022"
  "\023\n\017SERVICE_COMPASS\020\004\022\023\n\017SERVICE_GALILEO\020"
  "\010\"\210\003\n\tNavSatFix\022 \n\006header\030\001 \001(\0132\020.std_ms"
  "gs.Header\022)\n\006status\030\002 \001(\0132\031.sensor_msgs."
  "NavSatStatus\022\020\n\010latitude\030\003 \001(\001\022\021\n\tlongit"
  "ude\030\004 \001(\001\022\020\n\010altitude\030\005 \001(\001\022\033\n\023position_"
  "covariance\030\006 \003(\001\022H\n\030position_covariance_"
  "type\030\007 \001(\0162&.sensor_msgs.NavSatFix.COVAR"
  "IANCE_TYPE\"\217\001\n\017COVARIANCE_TYPE\022\033\n\027COVARI"
  "ANCE_TYPE_UNKNOWN\020\000\022 \n\034COVARIANCE_TYPE_A"
  "PPROXIMATED\020\001\022\"\n\036COVARIANCE_TYPE_DIAGONA"
  "L_KNOWN\020\002\022\031\n\025COVARIANCE_TYPE_KNOWN\020\003b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensor_5fmsgs_2eproto_deps[2] = {
  &::descriptor_table_geometry_5fmsgs_2eproto,
  &::descriptor_table_std_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sensor_5fmsgs_2eproto_sccs[9] = {
  &scc_info_CompressedImage_sensor_5fmsgs_2eproto.base,
  &scc_info_DiffEncoder_sensor_5fmsgs_2eproto.base,
  &scc_info_Image_sensor_5fmsgs_2eproto.base,
  &scc_info_Imu_sensor_5fmsgs_2eproto.base,
  &scc_info_LaserScan_sensor_5fmsgs_2eproto.base,
  &scc_info_NavSatFix_sensor_5fmsgs_2eproto.base,
  &scc_info_NavSatStatus_sensor_5fmsgs_2eproto.base,
  &scc_info_PointCloud_sensor_5fmsgs_2eproto.base,
  &scc_info_PointField_sensor_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensor_5fmsgs_2eproto_once;
static bool descriptor_table_sensor_5fmsgs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_5fmsgs_2eproto = {
  &descriptor_table_sensor_5fmsgs_2eproto_initialized, descriptor_table_protodef_sensor_5fmsgs_2eproto, "sensor_msgs.proto", 2004,
  &descriptor_table_sensor_5fmsgs_2eproto_once, descriptor_table_sensor_5fmsgs_2eproto_sccs, descriptor_table_sensor_5fmsgs_2eproto_deps, 9, 2,
  schemas, file_default_instances, TableStruct_sensor_5fmsgs_2eproto::offsets,
  file_level_metadata_sensor_5fmsgs_2eproto, 9, file_level_enum_descriptors_sensor_5fmsgs_2eproto, file_level_service_descriptors_sensor_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensor_5fmsgs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sensor_5fmsgs_2eproto), true);
namespace sensor_msgs {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointField_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensor_5fmsgs_2eproto);
  return file_level_enum_descriptors_sensor_5fmsgs_2eproto[0];
}
bool PointField_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PointField_Type PointField::BYTE;
constexpr PointField_Type PointField::INT8;
constexpr PointField_Type PointField::UINT8;
constexpr PointField_Type PointField::INT16;
constexpr PointField_Type PointField::UINT16;
constexpr PointField_Type PointField::INT32;
constexpr PointField_Type PointField::UINT32;
constexpr PointField_Type PointField::FLOAT32;
constexpr PointField_Type PointField::FLOAT64;
constexpr PointField_Type PointField::Type_MIN;
constexpr PointField_Type PointField::Type_MAX;
constexpr int PointField::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavSatStatus_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensor_5fmsgs_2eproto);
  return file_level_enum_descriptors_sensor_5fmsgs_2eproto[1];
}
bool NavSatStatus_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NavSatStatus_STATUS NavSatStatus::STATUS_NO_FIX;
constexpr NavSatStatus_STATUS NavSatStatus::STATUS_FIX;
constexpr NavSatStatus_STATUS NavSatStatus::STATUS_SBAS_FIX;
constexpr NavSatStatus_STATUS NavSatStatus::STATUS_GBAS_FIX;
constexpr NavSatStatus_STATUS NavSatStatus::STATUS_MIN;
constexpr NavSatStatus_STATUS NavSatStatus::STATUS_MAX;
constexpr int NavSatStatus::STATUS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavSatStatus_SERVICE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensor_5fmsgs_2eproto);
  return file_level_enum_descriptors_sensor_5fmsgs_2eproto[2];
}
bool NavSatStatus_SERVICE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NavSatStatus_SERVICE NavSatStatus::NONE;
constexpr NavSatStatus_SERVICE NavSatStatus::SERVICE_GPS;
constexpr NavSatStatus_SERVICE NavSatStatus::SERVICE_GLONASS;
constexpr NavSatStatus_SERVICE NavSatStatus::SERVICE_COMPASS;
constexpr NavSatStatus_SERVICE NavSatStatus::SERVICE_GALILEO;
constexpr NavSatStatus_SERVICE NavSatStatus::SERVICE_MIN;
constexpr NavSatStatus_SERVICE NavSatStatus::SERVICE_MAX;
constexpr int NavSatStatus::SERVICE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavSatFix_COVARIANCE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sensor_5fmsgs_2eproto);
  return file_level_enum_descriptors_sensor_5fmsgs_2eproto[3];
}
bool NavSatFix_COVARIANCE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NavSatFix_COVARIANCE_TYPE NavSatFix::COVARIANCE_TYPE_UNKNOWN;
constexpr NavSatFix_COVARIANCE_TYPE NavSatFix::COVARIANCE_TYPE_APPROXIMATED;
constexpr NavSatFix_COVARIANCE_TYPE NavSatFix::COVARIANCE_TYPE_DIAGONAL_KNOWN;
constexpr NavSatFix_COVARIANCE_TYPE NavSatFix::COVARIANCE_TYPE_KNOWN;
constexpr NavSatFix_COVARIANCE_TYPE NavSatFix::COVARIANCE_TYPE_MIN;
constexpr NavSatFix_COVARIANCE_TYPE NavSatFix::COVARIANCE_TYPE_MAX;
constexpr int NavSatFix::COVARIANCE_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PointField::InitAsDefaultInstance() {
}
class PointField::_Internal {
 public:
};

PointField::PointField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.PointField)
}
PointField::PointField(const PointField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.PointField)
}

void PointField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointField_sensor_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
}

PointField::~PointField() {
  // @@protoc_insertion_point(destructor:sensor_msgs.PointField)
  SharedDtor();
}

void PointField::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PointField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointField& PointField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointField_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PointField::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.PointField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(count_));
  _internal_metadata_.Clear();
}

const char* PointField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensor_msgs.PointField.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensor_msgs.PointField.Type datatype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_datatype(static_cast<::sensor_msgs::PointField_Type>(val));
        } else goto handle_unusual;
        continue;
      // int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.PointField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensor_msgs.PointField.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  // .sensor_msgs.PointField.Type datatype = 3;
  if (this->datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_datatype(), target);
  }

  // int32 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.PointField)
  return target;
}

size_t PointField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.PointField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // .sensor_msgs.PointField.Type datatype = 3;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datatype());
  }

  // int32 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.PointField)
  GOOGLE_DCHECK_NE(&from, this);
  const PointField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.PointField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.PointField)
    MergeFrom(*source);
  }
}

void PointField::MergeFrom(const PointField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.PointField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PointField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.PointField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointField::CopyFrom(const PointField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.PointField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointField::IsInitialized() const {
  return true;
}

void PointField::InternalSwap(PointField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(offset_, other->offset_);
  swap(datatype_, other->datatype_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointCloud::InitAsDefaultInstance() {
  ::sensor_msgs::_PointCloud_default_instance_._instance.get_mutable()->header_ = const_cast< ::std_msgs::Header*>(
      ::std_msgs::Header::internal_default_instance());
}
class PointCloud::_Internal {
 public:
  static const ::std_msgs::Header& header(const PointCloud* msg);
};

const ::std_msgs::Header&
PointCloud::_Internal::header(const PointCloud* msg) {
  return *msg->header_;
}
void PointCloud::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PointCloud::PointCloud()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&fields_num_) -
    reinterpret_cast<char*>(&height_)) + sizeof(fields_num_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.PointCloud)
}

void PointCloud::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointCloud_sensor_5fmsgs_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fields_num_) -
      reinterpret_cast<char*>(&header_)) + sizeof(fields_num_));
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:sensor_msgs.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointCloud& PointCloud::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointCloud_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.PointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fields_num_) -
      reinterpret_cast<char*>(&height_)) + sizeof(fields_num_));
  _internal_metadata_.Clear();
}

const char* PointCloud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fields_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fields_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sensor_msgs.PointField fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointCloud::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.PointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 fields_num = 4;
  if (this->fields_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fields_num(), target);
  }

  // repeated .sensor_msgs.PointField fields = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_fields(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.PointCloud)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensor_msgs.PointField fields = 5;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 fields_num = 4;
  if (this->fields_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fields_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloud::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloud* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointCloud>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.PointCloud)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_header()) {
    _internal_mutable_header()->::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.fields_num() != 0) {
    _internal_set_fields_num(from._internal_fields_num());
  }
}

void PointCloud::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  swap(header_, other->header_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(fields_num_, other->fields_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloud::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaserScan::InitAsDefaultInstance() {
  ::sensor_msgs::_LaserScan_default_instance_._instance.get_mutable()->header_ = const_cast< ::std_msgs::Header*>(
      ::std_msgs::Header::internal_default_instance());
}
class LaserScan::_Internal {
 public:
  static const ::std_msgs::Header& header(const LaserScan* msg);
};

const ::std_msgs::Header&
LaserScan::_Internal::header(const LaserScan* msg) {
  return *msg->header_;
}
void LaserScan::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
LaserScan::LaserScan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.LaserScan)
}
LaserScan::LaserScan(const LaserScan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ranges_(from.ranges_),
      intensities_(from.intensities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&angle_min_, &from.angle_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_max_) -
    reinterpret_cast<char*>(&angle_min_)) + sizeof(range_max_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.LaserScan)
}

void LaserScan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaserScan_sensor_5fmsgs_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_max_) -
      reinterpret_cast<char*>(&header_)) + sizeof(range_max_));
}

LaserScan::~LaserScan() {
  // @@protoc_insertion_point(destructor:sensor_msgs.LaserScan)
  SharedDtor();
}

void LaserScan::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LaserScan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaserScan& LaserScan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaserScan_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void LaserScan::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.LaserScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  intensities_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&angle_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_max_) -
      reinterpret_cast<char*>(&angle_min_)) + sizeof(range_max_));
  _internal_metadata_.Clear();
}

const char* LaserScan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float angle_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          angle_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          angle_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle_increment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          angle_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time_increment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          time_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scan_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          scan_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float range_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          range_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float range_max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          range_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float ranges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ranges(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_ranges(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float intensities = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_intensities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          _internal_add_intensities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaserScan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.LaserScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // float angle_min = 2;
  if (!(this->angle_min() <= 0 && this->angle_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_angle_min(), target);
  }

  // float angle_max = 3;
  if (!(this->angle_max() <= 0 && this->angle_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle_max(), target);
  }

  // float angle_increment = 4;
  if (!(this->angle_increment() <= 0 && this->angle_increment() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_angle_increment(), target);
  }

  // float time_increment = 5;
  if (!(this->time_increment() <= 0 && this->time_increment() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_time_increment(), target);
  }

  // float scan_time = 6;
  if (!(this->scan_time() <= 0 && this->scan_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_scan_time(), target);
  }

  // float range_min = 7;
  if (!(this->range_min() <= 0 && this->range_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_range_min(), target);
  }

  // float range_max = 8;
  if (!(this->range_max() <= 0 && this->range_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_range_max(), target);
  }

  // repeated float ranges = 9;
  if (this->_internal_ranges_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_ranges(), target);
  }

  // repeated float intensities = 10;
  if (this->_internal_intensities_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_intensities(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.LaserScan)
  return target;
}

size_t LaserScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.LaserScan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float ranges = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ranges_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ranges_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float intensities = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_intensities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intensities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float angle_min = 2;
  if (!(this->angle_min() <= 0 && this->angle_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle_max = 3;
  if (!(this->angle_max() <= 0 && this->angle_max() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle_increment = 4;
  if (!(this->angle_increment() <= 0 && this->angle_increment() >= 0)) {
    total_size += 1 + 4;
  }

  // float time_increment = 5;
  if (!(this->time_increment() <= 0 && this->time_increment() >= 0)) {
    total_size += 1 + 4;
  }

  // float scan_time = 6;
  if (!(this->scan_time() <= 0 && this->scan_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float range_min = 7;
  if (!(this->range_min() <= 0 && this->range_min() >= 0)) {
    total_size += 1 + 4;
  }

  // float range_max = 8;
  if (!(this->range_max() <= 0 && this->range_max() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserScan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.LaserScan)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserScan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaserScan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.LaserScan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.LaserScan)
    MergeFrom(*source);
  }
}

void LaserScan::MergeFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.LaserScan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  intensities_.MergeFrom(from.intensities_);
  if (from.has_header()) {
    _internal_mutable_header()->::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (!(from.angle_min() <= 0 && from.angle_min() >= 0)) {
    _internal_set_angle_min(from._internal_angle_min());
  }
  if (!(from.angle_max() <= 0 && from.angle_max() >= 0)) {
    _internal_set_angle_max(from._internal_angle_max());
  }
  if (!(from.angle_increment() <= 0 && from.angle_increment() >= 0)) {
    _internal_set_angle_increment(from._internal_angle_increment());
  }
  if (!(from.time_increment() <= 0 && from.time_increment() >= 0)) {
    _internal_set_time_increment(from._internal_time_increment());
  }
  if (!(from.scan_time() <= 0 && from.scan_time() >= 0)) {
    _internal_set_scan_time(from._internal_scan_time());
  }
  if (!(from.range_min() <= 0 && from.range_min() >= 0)) {
    _internal_set_range_min(from._internal_range_min());
  }
  if (!(from.range_max() <= 0 && from.range_max() >= 0)) {
    _internal_set_range_max(from._internal_range_max());
  }
}

void LaserScan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserScan::CopyFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserScan::IsInitialized() const {
  return true;
}

void LaserScan::InternalSwap(LaserScan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ranges_.InternalSwap(&other->ranges_);
  intensities_.InternalSwap(&other->intensities_);
  swap(header_, other->header_);
  swap(angle_min_, other->angle_min_);
  swap(angle_max_, other->angle_max_);
  swap(angle_increment_, other->angle_increment_);
  swap(time_increment_, other->time_increment_);
  swap(scan_time_, other->scan_time_);
  swap(range_min_, other->range_min_);
  swap(range_max_, other->range_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaserScan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Imu::InitAsDefaultInstance() {
  ::sensor_msgs::_Imu_default_instance_._instance.get_mutable()->header_ = const_cast< ::std_msgs::Header*>(
      ::std_msgs::Header::internal_default_instance());
  ::sensor_msgs::_Imu_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::geometry_msgs::Quaternion*>(
      ::geometry_msgs::Quaternion::internal_default_instance());
  ::sensor_msgs::_Imu_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::geometry_msgs::Vector3*>(
      ::geometry_msgs::Vector3::internal_default_instance());
  ::sensor_msgs::_Imu_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::geometry_msgs::Vector3*>(
      ::geometry_msgs::Vector3::internal_default_instance());
}
class Imu::_Internal {
 public:
  static const ::std_msgs::Header& header(const Imu* msg);
  static const ::geometry_msgs::Quaternion& orientation(const Imu* msg);
  static const ::geometry_msgs::Vector3& angular_velocity(const Imu* msg);
  static const ::geometry_msgs::Vector3& linear_acceleration(const Imu* msg);
};

const ::std_msgs::Header&
Imu::_Internal::header(const Imu* msg) {
  return *msg->header_;
}
const ::geometry_msgs::Quaternion&
Imu::_Internal::orientation(const Imu* msg) {
  return *msg->orientation_;
}
const ::geometry_msgs::Vector3&
Imu::_Internal::angular_velocity(const Imu* msg) {
  return *msg->angular_velocity_;
}
const ::geometry_msgs::Vector3&
Imu::_Internal::linear_acceleration(const Imu* msg) {
  return *msg->linear_acceleration_;
}
void Imu::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Imu::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
void Imu::clear_angular_velocity() {
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
void Imu::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
}
Imu::Imu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.Imu)
}
Imu::Imu(const Imu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      orientation_covariance_(from.orientation_covariance_),
      angular_velocity_covariance_(from.angular_velocity_covariance_),
      linear_acceleration_covariance_(from.linear_acceleration_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::geometry_msgs::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::geometry_msgs::Vector3(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::geometry_msgs::Vector3(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.Imu)
}

void Imu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Imu_sensor_5fmsgs_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linear_acceleration_) -
      reinterpret_cast<char*>(&header_)) + sizeof(linear_acceleration_));
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:sensor_msgs.Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
}

void Imu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Imu& Imu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Imu_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orientation_covariance_.Clear();
  angular_velocity_covariance_.Clear();
  linear_acceleration_covariance_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Imu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .geometry_msgs.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double orientation_covariance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_orientation_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_orientation_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .geometry_msgs.Vector3 angular_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double angular_velocity_covariance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_angular_velocity_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_angular_velocity_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .geometry_msgs.Vector3 linear_acceleration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double linear_acceleration_covariance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_linear_acceleration_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_linear_acceleration_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Imu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .geometry_msgs.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  // repeated double orientation_covariance = 3;
  if (this->_internal_orientation_covariance_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_orientation_covariance(), target);
  }

  // .geometry_msgs.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::angular_velocity(this), target, stream);
  }

  // repeated double angular_velocity_covariance = 5;
  if (this->_internal_angular_velocity_covariance_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_angular_velocity_covariance(), target);
  }

  // .geometry_msgs.Vector3 linear_acceleration = 6;
  if (this->has_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::linear_acceleration(this), target, stream);
  }

  // repeated double linear_acceleration_covariance = 7;
  if (this->_internal_linear_acceleration_covariance_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_linear_acceleration_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.Imu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double orientation_covariance = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_orientation_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _orientation_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double angular_velocity_covariance = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_angular_velocity_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _angular_velocity_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double linear_acceleration_covariance = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_linear_acceleration_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _linear_acceleration_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .geometry_msgs.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .geometry_msgs.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .geometry_msgs.Vector3 linear_acceleration = 6;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Imu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Imu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.Imu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orientation_covariance_.MergeFrom(from.orientation_covariance_);
  angular_velocity_covariance_.MergeFrom(from.angular_velocity_covariance_);
  linear_acceleration_covariance_.MergeFrom(from.linear_acceleration_covariance_);
  if (from.has_header()) {
    _internal_mutable_header()->::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::geometry_msgs::Quaternion::MergeFrom(from._internal_orientation());
  }
  if (from.has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::geometry_msgs::Vector3::MergeFrom(from._internal_angular_velocity());
  }
  if (from.has_linear_acceleration()) {
    _internal_mutable_linear_acceleration()->::geometry_msgs::Vector3::MergeFrom(from._internal_linear_acceleration());
  }
}

void Imu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::InternalSwap(Imu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orientation_covariance_.InternalSwap(&other->orientation_covariance_);
  angular_velocity_covariance_.InternalSwap(&other->angular_velocity_covariance_);
  linear_acceleration_covariance_.InternalSwap(&other->linear_acceleration_covariance_);
  swap(header_, other->header_);
  swap(orientation_, other->orientation_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Imu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::sensor_msgs::_Image_default_instance_._instance.get_mutable()->header_ = const_cast< ::std_msgs::Header*>(
      ::std_msgs::Header::internal_default_instance());
}
class Image::_Internal {
 public:
  static const ::std_msgs::Header& header(const Image* msg);
};

const ::std_msgs::Header&
Image::_Internal::header(const Image* msg) {
  return *msg->header_;
}
void Image::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Image::Image()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoding().empty()) {
    encoding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_header()) {
    header_ = new ::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&height_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_sensor_5fmsgs_2eproto.base);
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&header_)) + sizeof(step_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:sensor_msgs.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  encoding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&height_)) + sizeof(step_));
  _internal_metadata_.Clear();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encoding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_encoding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensor_msgs.Image.encoding"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_bigendian = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_bigendian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 step = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // string encoding = 4;
  if (this->encoding().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensor_msgs.Image.encoding");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_encoding(), target);
  }

  // bool is_bigendian = 5;
  if (this->is_bigendian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_bigendian(), target);
  }

  // uint32 step = 6;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_step(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string encoding = 4;
  if (this->encoding().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoding());
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // bool is_bigendian = 5;
  if (this->is_bigendian() != 0) {
    total_size += 1 + 1;
  }

  // uint32 step = 6;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_step());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoding().size() > 0) {

    encoding_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.is_bigendian() != 0) {
    _internal_set_is_bigendian(from._internal_is_bigendian());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  encoding_.Swap(&other->encoding_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(is_bigendian_, other->is_bigendian_);
  swap(step_, other->step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompressedImage::InitAsDefaultInstance() {
  ::sensor_msgs::_CompressedImage_default_instance_._instance.get_mutable()->header_ = const_cast< ::std_msgs::Header*>(
      ::std_msgs::Header::internal_default_instance());
}
class CompressedImage::_Internal {
 public:
  static const ::std_msgs::Header& header(const CompressedImage* msg);
};

const ::std_msgs::Header&
CompressedImage::_Internal::header(const CompressedImage* msg) {
  return *msg->header_;
}
void CompressedImage::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
CompressedImage::CompressedImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.CompressedImage)
}
CompressedImage::CompressedImage(const CompressedImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format().empty()) {
    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_header()) {
    header_ = new ::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.CompressedImage)
}

void CompressedImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompressedImage_sensor_5fmsgs_2eproto.base);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&header_)) + sizeof(size_));
}

CompressedImage::~CompressedImage() {
  // @@protoc_insertion_point(destructor:sensor_msgs.CompressedImage)
  SharedDtor();
}

void CompressedImage::SharedDtor() {
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CompressedImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompressedImage& CompressedImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompressedImage_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CompressedImage::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.CompressedImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CompressedImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensor_msgs.CompressedImage.format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompressedImage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.CompressedImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string format = 2;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensor_msgs.CompressedImage.format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format(), target);
  }

  // int64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.CompressedImage)
  return target;
}

size_t CompressedImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.CompressedImage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 2;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressedImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.CompressedImage)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompressedImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.CompressedImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.CompressedImage)
    MergeFrom(*source);
  }
}

void CompressedImage::MergeFrom(const CompressedImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.CompressedImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void CompressedImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.CompressedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedImage::CopyFrom(const CompressedImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.CompressedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedImage::IsInitialized() const {
  return true;
}

void CompressedImage::InternalSwap(CompressedImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressedImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiffEncoder::InitAsDefaultInstance() {
  ::sensor_msgs::_DiffEncoder_default_instance_._instance.get_mutable()->header_ = const_cast< ::std_msgs::Header*>(
      ::std_msgs::Header::internal_default_instance());
}
class DiffEncoder::_Internal {
 public:
  static const ::std_msgs::Header& header(const DiffEncoder* msg);
};

const ::std_msgs::Header&
DiffEncoder::_Internal::header(const DiffEncoder* msg) {
  return *msg->header_;
}
void DiffEncoder::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DiffEncoder::DiffEncoder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.DiffEncoder)
}
DiffEncoder::DiffEncoder(const DiffEncoder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&left_encoder_, &from.left_encoder_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_encoder_) -
    reinterpret_cast<char*>(&left_encoder_)) + sizeof(right_encoder_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.DiffEncoder)
}

void DiffEncoder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiffEncoder_sensor_5fmsgs_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_encoder_) -
      reinterpret_cast<char*>(&header_)) + sizeof(right_encoder_));
}

DiffEncoder::~DiffEncoder() {
  // @@protoc_insertion_point(destructor:sensor_msgs.DiffEncoder)
  SharedDtor();
}

void DiffEncoder::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DiffEncoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiffEncoder& DiffEncoder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiffEncoder_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void DiffEncoder::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.DiffEncoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&left_encoder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_encoder_) -
      reinterpret_cast<char*>(&left_encoder_)) + sizeof(right_encoder_));
  _internal_metadata_.Clear();
}

const char* DiffEncoder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float left_encoder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          left_encoder_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_encoder = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          right_encoder_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiffEncoder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.DiffEncoder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // float left_encoder = 2;
  if (!(this->left_encoder() <= 0 && this->left_encoder() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_left_encoder(), target);
  }

  // float right_encoder = 3;
  if (!(this->right_encoder() <= 0 && this->right_encoder() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_right_encoder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.DiffEncoder)
  return target;
}

size_t DiffEncoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.DiffEncoder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float left_encoder = 2;
  if (!(this->left_encoder() <= 0 && this->left_encoder() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_encoder = 3;
  if (!(this->right_encoder() <= 0 && this->right_encoder() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiffEncoder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.DiffEncoder)
  GOOGLE_DCHECK_NE(&from, this);
  const DiffEncoder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiffEncoder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.DiffEncoder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.DiffEncoder)
    MergeFrom(*source);
  }
}

void DiffEncoder::MergeFrom(const DiffEncoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.DiffEncoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (!(from.left_encoder() <= 0 && from.left_encoder() >= 0)) {
    _internal_set_left_encoder(from._internal_left_encoder());
  }
  if (!(from.right_encoder() <= 0 && from.right_encoder() >= 0)) {
    _internal_set_right_encoder(from._internal_right_encoder());
  }
}

void DiffEncoder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.DiffEncoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiffEncoder::CopyFrom(const DiffEncoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.DiffEncoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffEncoder::IsInitialized() const {
  return true;
}

void DiffEncoder::InternalSwap(DiffEncoder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(left_encoder_, other->left_encoder_);
  swap(right_encoder_, other->right_encoder_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffEncoder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavSatStatus::InitAsDefaultInstance() {
}
class NavSatStatus::_Internal {
 public:
};

NavSatStatus::NavSatStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.NavSatStatus)
}
NavSatStatus::NavSatStatus(const NavSatStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_) -
    reinterpret_cast<char*>(&status_)) + sizeof(service_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.NavSatStatus)
}

void NavSatStatus::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_) -
      reinterpret_cast<char*>(&status_)) + sizeof(service_));
}

NavSatStatus::~NavSatStatus() {
  // @@protoc_insertion_point(destructor:sensor_msgs.NavSatStatus)
  SharedDtor();
}

void NavSatStatus::SharedDtor() {
}

void NavSatStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavSatStatus& NavSatStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavSatStatus_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void NavSatStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.NavSatStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_) -
      reinterpret_cast<char*>(&status_)) + sizeof(service_));
  _internal_metadata_.Clear();
}

const char* NavSatStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sensor_msgs.NavSatStatus.STATUS status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::sensor_msgs::NavSatStatus_STATUS>(val));
        } else goto handle_unusual;
        continue;
      // .sensor_msgs.NavSatStatus.SERVICE service = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_service(static_cast<::sensor_msgs::NavSatStatus_SERVICE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavSatStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.NavSatStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensor_msgs.NavSatStatus.STATUS status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .sensor_msgs.NavSatStatus.SERVICE service = 6;
  if (this->service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_service(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.NavSatStatus)
  return target;
}

size_t NavSatStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.NavSatStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensor_msgs.NavSatStatus.STATUS status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .sensor_msgs.NavSatStatus.SERVICE service = 6;
  if (this->service() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_service());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavSatStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.NavSatStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const NavSatStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavSatStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.NavSatStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.NavSatStatus)
    MergeFrom(*source);
  }
}

void NavSatStatus::MergeFrom(const NavSatStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.NavSatStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.service() != 0) {
    _internal_set_service(from._internal_service());
  }
}

void NavSatStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.NavSatStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavSatStatus::CopyFrom(const NavSatStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.NavSatStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavSatStatus::IsInitialized() const {
  return true;
}

void NavSatStatus::InternalSwap(NavSatStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(service_, other->service_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavSatStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavSatFix::InitAsDefaultInstance() {
  ::sensor_msgs::_NavSatFix_default_instance_._instance.get_mutable()->header_ = const_cast< ::std_msgs::Header*>(
      ::std_msgs::Header::internal_default_instance());
  ::sensor_msgs::_NavSatFix_default_instance_._instance.get_mutable()->status_ = const_cast< ::sensor_msgs::NavSatStatus*>(
      ::sensor_msgs::NavSatStatus::internal_default_instance());
}
class NavSatFix::_Internal {
 public:
  static const ::std_msgs::Header& header(const NavSatFix* msg);
  static const ::sensor_msgs::NavSatStatus& status(const NavSatFix* msg);
};

const ::std_msgs::Header&
NavSatFix::_Internal::header(const NavSatFix* msg) {
  return *msg->header_;
}
const ::sensor_msgs::NavSatStatus&
NavSatFix::_Internal::status(const NavSatFix* msg) {
  return *msg->status_;
}
void NavSatFix::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
NavSatFix::NavSatFix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_msgs.NavSatFix)
}
NavSatFix::NavSatFix(const NavSatFix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      position_covariance_(from.position_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::std_msgs::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::sensor_msgs::NavSatStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_covariance_type_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(position_covariance_type_));
  // @@protoc_insertion_point(copy_constructor:sensor_msgs.NavSatFix)
}

void NavSatFix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavSatFix_sensor_5fmsgs_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_covariance_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(position_covariance_type_));
}

NavSatFix::~NavSatFix() {
  // @@protoc_insertion_point(destructor:sensor_msgs.NavSatFix)
  SharedDtor();
}

void NavSatFix::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
}

void NavSatFix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavSatFix& NavSatFix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavSatFix_sensor_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void NavSatFix::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_msgs.NavSatFix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_covariance_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_covariance_type_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(position_covariance_type_));
  _internal_metadata_.Clear();
}

const char* NavSatFix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sensor_msgs.NavSatStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double position_covariance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_position_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sensor_msgs.NavSatFix.COVARIANCE_TYPE position_covariance_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_position_covariance_type(static_cast<::sensor_msgs::NavSatFix_COVARIANCE_TYPE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavSatFix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensor_msgs.NavSatFix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .sensor_msgs.NavSatStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // double latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude(), target);
  }

  // double longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude(), target);
  }

  // double altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_altitude(), target);
  }

  // repeated double position_covariance = 6;
  if (this->_internal_position_covariance_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_position_covariance(), target);
  }

  // .sensor_msgs.NavSatFix.COVARIANCE_TYPE position_covariance_type = 7;
  if (this->position_covariance_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_position_covariance_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_msgs.NavSatFix)
  return target;
}

size_t NavSatFix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_msgs.NavSatFix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double position_covariance = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .std_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .sensor_msgs.NavSatStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // double latitude = 3;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 5;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  // .sensor_msgs.NavSatFix.COVARIANCE_TYPE position_covariance_type = 7;
  if (this->position_covariance_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_position_covariance_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavSatFix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_msgs.NavSatFix)
  GOOGLE_DCHECK_NE(&from, this);
  const NavSatFix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavSatFix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_msgs.NavSatFix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_msgs.NavSatFix)
    MergeFrom(*source);
  }
}

void NavSatFix::MergeFrom(const NavSatFix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_msgs.NavSatFix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_covariance_.MergeFrom(from.position_covariance_);
  if (from.has_header()) {
    _internal_mutable_header()->::std_msgs::Header::MergeFrom(from._internal_header());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::sensor_msgs::NavSatStatus::MergeFrom(from._internal_status());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from.position_covariance_type() != 0) {
    _internal_set_position_covariance_type(from._internal_position_covariance_type());
  }
}

void NavSatFix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_msgs.NavSatFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavSatFix::CopyFrom(const NavSatFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_msgs.NavSatFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavSatFix::IsInitialized() const {
  return true;
}

void NavSatFix::InternalSwap(NavSatFix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  position_covariance_.InternalSwap(&other->position_covariance_);
  swap(header_, other->header_);
  swap(status_, other->status_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(position_covariance_type_, other->position_covariance_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavSatFix::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensor_msgs::PointField* Arena::CreateMaybeMessage< ::sensor_msgs::PointField >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::PointField >(arena);
}
template<> PROTOBUF_NOINLINE ::sensor_msgs::PointCloud* Arena::CreateMaybeMessage< ::sensor_msgs::PointCloud >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::PointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::sensor_msgs::LaserScan* Arena::CreateMaybeMessage< ::sensor_msgs::LaserScan >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::LaserScan >(arena);
}
template<> PROTOBUF_NOINLINE ::sensor_msgs::Imu* Arena::CreateMaybeMessage< ::sensor_msgs::Imu >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::Imu >(arena);
}
template<> PROTOBUF_NOINLINE ::sensor_msgs::Image* Arena::CreateMaybeMessage< ::sensor_msgs::Image >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::sensor_msgs::CompressedImage* Arena::CreateMaybeMessage< ::sensor_msgs::CompressedImage >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::CompressedImage >(arena);
}
template<> PROTOBUF_NOINLINE ::sensor_msgs::DiffEncoder* Arena::CreateMaybeMessage< ::sensor_msgs::DiffEncoder >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::DiffEncoder >(arena);
}
template<> PROTOBUF_NOINLINE ::sensor_msgs::NavSatStatus* Arena::CreateMaybeMessage< ::sensor_msgs::NavSatStatus >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::NavSatStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::sensor_msgs::NavSatFix* Arena::CreateMaybeMessage< ::sensor_msgs::NavSatFix >(Arena* arena) {
  return Arena::CreateInternal< ::sensor_msgs::NavSatFix >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
