// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geometry_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geometry_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "std_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geometry_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geometry_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geometry_5fmsgs_2eproto;
namespace geometry_msgs {
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Point32;
class Point32DefaultTypeInternal;
extern Point32DefaultTypeInternal _Point32_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class PoseStamped;
class PoseStampedDefaultTypeInternal;
extern PoseStampedDefaultTypeInternal _PoseStamped_default_instance_;
class PoseWithCovariance;
class PoseWithCovarianceDefaultTypeInternal;
extern PoseWithCovarianceDefaultTypeInternal _PoseWithCovariance_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Twist;
class TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
class TwistWithCovariance;
class TwistWithCovarianceDefaultTypeInternal;
extern TwistWithCovarianceDefaultTypeInternal _TwistWithCovariance_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace geometry_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::geometry_msgs::Point* Arena::CreateMaybeMessage<::geometry_msgs::Point>(Arena*);
template<> ::geometry_msgs::Point32* Arena::CreateMaybeMessage<::geometry_msgs::Point32>(Arena*);
template<> ::geometry_msgs::Pose* Arena::CreateMaybeMessage<::geometry_msgs::Pose>(Arena*);
template<> ::geometry_msgs::PoseStamped* Arena::CreateMaybeMessage<::geometry_msgs::PoseStamped>(Arena*);
template<> ::geometry_msgs::PoseWithCovariance* Arena::CreateMaybeMessage<::geometry_msgs::PoseWithCovariance>(Arena*);
template<> ::geometry_msgs::Quaternion* Arena::CreateMaybeMessage<::geometry_msgs::Quaternion>(Arena*);
template<> ::geometry_msgs::Twist* Arena::CreateMaybeMessage<::geometry_msgs::Twist>(Arena*);
template<> ::geometry_msgs::TwistWithCovariance* Arena::CreateMaybeMessage<::geometry_msgs::TwistWithCovariance>(Arena*);
template<> ::geometry_msgs::Vector3* Arena::CreateMaybeMessage<::geometry_msgs::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace geometry_msgs {

// ===================================================================

class Vector3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.Vector3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.Vector3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.Quaternion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Point32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.Point32) */ {
 public:
  Point32();
  virtual ~Point32();

  Point32(const Point32& from);
  Point32(Point32&& from) noexcept
    : Point32() {
    *this = ::std::move(from);
  }

  inline Point32& operator=(const Point32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point32& operator=(Point32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point32* internal_default_instance() {
    return reinterpret_cast<const Point32*>(
               &_Point32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point32& a, Point32& b) {
    a.Swap(&b);
  }
  inline void Swap(Point32* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point32* New() const final {
    return CreateMaybeMessage<Point32>(nullptr);
  }

  Point32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point32& from);
  void MergeFrom(const Point32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.Point32";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.Point32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Pose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.Pose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .geometry_msgs.Point position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::geometry_msgs::Point& position() const;
  ::geometry_msgs::Point* release_position();
  ::geometry_msgs::Point* mutable_position();
  void set_allocated_position(::geometry_msgs::Point* position);
  private:
  const ::geometry_msgs::Point& _internal_position() const;
  ::geometry_msgs::Point* _internal_mutable_position();
  public:

  // .geometry_msgs.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::geometry_msgs::Quaternion& orientation() const;
  ::geometry_msgs::Quaternion* release_orientation();
  ::geometry_msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::geometry_msgs::Quaternion* orientation);
  private:
  const ::geometry_msgs::Quaternion& _internal_orientation() const;
  ::geometry_msgs::Quaternion* _internal_mutable_orientation();
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.Pose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::geometry_msgs::Point* position_;
  ::geometry_msgs::Quaternion* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PoseStamped :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.PoseStamped) */ {
 public:
  PoseStamped();
  virtual ~PoseStamped();

  PoseStamped(const PoseStamped& from);
  PoseStamped(PoseStamped&& from) noexcept
    : PoseStamped() {
    *this = ::std::move(from);
  }

  inline PoseStamped& operator=(const PoseStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseStamped& operator=(PoseStamped&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseStamped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseStamped* internal_default_instance() {
    return reinterpret_cast<const PoseStamped*>(
               &_PoseStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PoseStamped& a, PoseStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseStamped* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseStamped* New() const final {
    return CreateMaybeMessage<PoseStamped>(nullptr);
  }

  PoseStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseStamped& from);
  void MergeFrom(const PoseStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.PoseStamped";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // .std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::std_msgs::Header& header() const;
  ::std_msgs::Header* release_header();
  ::std_msgs::Header* mutable_header();
  void set_allocated_header(::std_msgs::Header* header);
  private:
  const ::std_msgs::Header& _internal_header() const;
  ::std_msgs::Header* _internal_mutable_header();
  public:

  // .geometry_msgs.Pose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::geometry_msgs::Pose& pose() const;
  ::geometry_msgs::Pose* release_pose();
  ::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::geometry_msgs::Pose* pose);
  private:
  const ::geometry_msgs::Pose& _internal_pose() const;
  ::geometry_msgs::Pose* _internal_mutable_pose();
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.PoseStamped)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::std_msgs::Header* header_;
  ::geometry_msgs::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class Twist :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.Twist) */ {
 public:
  Twist();
  virtual ~Twist();

  Twist(const Twist& from);
  Twist(Twist&& from) noexcept
    : Twist() {
    *this = ::std::move(from);
  }

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Twist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Twist& a, Twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Twist* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Twist* New() const final {
    return CreateMaybeMessage<Twist>(nullptr);
  }

  Twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Twist& from);
  void MergeFrom(const Twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.Twist";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .geometry_msgs.Vector3 linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::geometry_msgs::Vector3& linear() const;
  ::geometry_msgs::Vector3* release_linear();
  ::geometry_msgs::Vector3* mutable_linear();
  void set_allocated_linear(::geometry_msgs::Vector3* linear);
  private:
  const ::geometry_msgs::Vector3& _internal_linear() const;
  ::geometry_msgs::Vector3* _internal_mutable_linear();
  public:

  // .geometry_msgs.Vector3 angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::geometry_msgs::Vector3& angular() const;
  ::geometry_msgs::Vector3* release_angular();
  ::geometry_msgs::Vector3* mutable_angular();
  void set_allocated_angular(::geometry_msgs::Vector3* angular);
  private:
  const ::geometry_msgs::Vector3& _internal_angular() const;
  ::geometry_msgs::Vector3* _internal_mutable_angular();
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.Twist)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::geometry_msgs::Vector3* linear_;
  ::geometry_msgs::Vector3* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PoseWithCovariance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.PoseWithCovariance) */ {
 public:
  PoseWithCovariance();
  virtual ~PoseWithCovariance();

  PoseWithCovariance(const PoseWithCovariance& from);
  PoseWithCovariance(PoseWithCovariance&& from) noexcept
    : PoseWithCovariance() {
    *this = ::std::move(from);
  }

  inline PoseWithCovariance& operator=(const PoseWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseWithCovariance& operator=(PoseWithCovariance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseWithCovariance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseWithCovariance* internal_default_instance() {
    return reinterpret_cast<const PoseWithCovariance*>(
               &_PoseWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PoseWithCovariance& a, PoseWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseWithCovariance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseWithCovariance* New() const final {
    return CreateMaybeMessage<PoseWithCovariance>(nullptr);
  }

  PoseWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseWithCovariance& from);
  void MergeFrom(const PoseWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.PoseWithCovariance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kPoseFieldNumber = 1,
  };
  // repeated double covariance = 2;
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  double _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_covariance() const;
  void _internal_add_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_covariance();
  public:
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .geometry_msgs.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::geometry_msgs::Pose& pose() const;
  ::geometry_msgs::Pose* release_pose();
  ::geometry_msgs::Pose* mutable_pose();
  void set_allocated_pose(::geometry_msgs::Pose* pose);
  private:
  const ::geometry_msgs::Pose& _internal_pose() const;
  ::geometry_msgs::Pose* _internal_mutable_pose();
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.PoseWithCovariance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::geometry_msgs::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class TwistWithCovariance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:geometry_msgs.TwistWithCovariance) */ {
 public:
  TwistWithCovariance();
  virtual ~TwistWithCovariance();

  TwistWithCovariance(const TwistWithCovariance& from);
  TwistWithCovariance(TwistWithCovariance&& from) noexcept
    : TwistWithCovariance() {
    *this = ::std::move(from);
  }

  inline TwistWithCovariance& operator=(const TwistWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwistWithCovariance& operator=(TwistWithCovariance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwistWithCovariance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwistWithCovariance* internal_default_instance() {
    return reinterpret_cast<const TwistWithCovariance*>(
               &_TwistWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TwistWithCovariance& a, TwistWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(TwistWithCovariance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwistWithCovariance* New() const final {
    return CreateMaybeMessage<TwistWithCovariance>(nullptr);
  }

  TwistWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwistWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwistWithCovariance& from);
  void MergeFrom(const TwistWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwistWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "geometry_msgs.TwistWithCovariance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_geometry_5fmsgs_2eproto);
    return ::descriptor_table_geometry_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kTwistFieldNumber = 1,
  };
  // repeated double covariance = 2;
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  double _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_covariance() const;
  void _internal_add_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_covariance();
  public:
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .geometry_msgs.Twist twist = 1;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::geometry_msgs::Twist& twist() const;
  ::geometry_msgs::Twist* release_twist();
  ::geometry_msgs::Twist* mutable_twist();
  void set_allocated_twist(::geometry_msgs::Twist* twist);
  private:
  const ::geometry_msgs::Twist& _internal_twist() const;
  ::geometry_msgs::Twist* _internal_mutable_twist();
  public:

  // @@protoc_insertion_point(class_scope:geometry_msgs.TwistWithCovariance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::geometry_msgs::Twist* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geometry_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::_internal_x() const {
  return x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::_internal_y() const {
  return y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::_internal_z() const {
  return z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Vector3.z)
}

// -------------------------------------------------------------------

// Quaternion

// double x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline double Quaternion::_internal_x() const {
  return x_;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Quaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Quaternion.x)
}

// double y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline double Quaternion::_internal_y() const {
  return y_;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Quaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Quaternion.y)
}

// double z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline double Quaternion::_internal_z() const {
  return z_;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Quaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Quaternion.z)
}

// double w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline double Quaternion::_internal_w() const {
  return w_;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Quaternion.w)
}

// -------------------------------------------------------------------

// Point32

// float x = 1;
inline void Point32::clear_x() {
  x_ = 0;
}
inline float Point32::_internal_x() const {
  return x_;
}
inline float Point32::x() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Point32.x)
  return _internal_x();
}
inline void Point32::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Point32::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Point32.x)
}

// float y = 2;
inline void Point32::clear_y() {
  y_ = 0;
}
inline float Point32::_internal_y() const {
  return y_;
}
inline float Point32::y() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Point32.y)
  return _internal_y();
}
inline void Point32::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Point32::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Point32.y)
}

// float z = 3;
inline void Point32::clear_z() {
  z_ = 0;
}
inline float Point32::_internal_z() const {
  return z_;
}
inline float Point32::z() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Point32.z)
  return _internal_z();
}
inline void Point32::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Point32::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Point32.z)
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Point.y)
}

// double z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline double Point::_internal_z() const {
  return z_;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Point::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:geometry_msgs.Point.z)
}

// -------------------------------------------------------------------

// Pose

// .geometry_msgs.Point position = 1;
inline bool Pose::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pose::has_position() const {
  return _internal_has_position();
}
inline void Pose::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::geometry_msgs::Point& Pose::_internal_position() const {
  const ::geometry_msgs::Point* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Point*>(
      &::geometry_msgs::_Point_default_instance_);
}
inline const ::geometry_msgs::Point& Pose::position() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Pose.position)
  return _internal_position();
}
inline ::geometry_msgs::Point* Pose::release_position() {
  // @@protoc_insertion_point(field_release:geometry_msgs.Pose.position)
  
  ::geometry_msgs::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Point* Pose::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Point>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::geometry_msgs::Point* Pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:geometry_msgs.Pose.position)
  return _internal_mutable_position();
}
inline void Pose::set_allocated_position(::geometry_msgs::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:geometry_msgs.Pose.position)
}

// .geometry_msgs.Quaternion orientation = 2;
inline bool Pose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Pose::has_orientation() const {
  return _internal_has_orientation();
}
inline void Pose::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::geometry_msgs::Quaternion& Pose::_internal_orientation() const {
  const ::geometry_msgs::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Quaternion*>(
      &::geometry_msgs::_Quaternion_default_instance_);
}
inline const ::geometry_msgs::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Pose.orientation)
  return _internal_orientation();
}
inline ::geometry_msgs::Quaternion* Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:geometry_msgs.Pose.orientation)
  
  ::geometry_msgs::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Quaternion* Pose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::geometry_msgs::Quaternion* Pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:geometry_msgs.Pose.orientation)
  return _internal_mutable_orientation();
}
inline void Pose::set_allocated_orientation(::geometry_msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:geometry_msgs.Pose.orientation)
}

// -------------------------------------------------------------------

// PoseStamped

// .std_msgs.Header header = 1;
inline bool PoseStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PoseStamped::has_header() const {
  return _internal_has_header();
}
inline const ::std_msgs::Header& PoseStamped::_internal_header() const {
  const ::std_msgs::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::std_msgs::Header*>(
      &::std_msgs::_Header_default_instance_);
}
inline const ::std_msgs::Header& PoseStamped::header() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.PoseStamped.header)
  return _internal_header();
}
inline ::std_msgs::Header* PoseStamped::release_header() {
  // @@protoc_insertion_point(field_release:geometry_msgs.PoseStamped.header)
  
  ::std_msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::std_msgs::Header* PoseStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::std_msgs::Header* PoseStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:geometry_msgs.PoseStamped.header)
  return _internal_mutable_header();
}
inline void PoseStamped::set_allocated_header(::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:geometry_msgs.PoseStamped.header)
}

// .geometry_msgs.Pose pose = 2;
inline bool PoseStamped::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseStamped::has_pose() const {
  return _internal_has_pose();
}
inline void PoseStamped::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::geometry_msgs::Pose& PoseStamped::_internal_pose() const {
  const ::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Pose*>(
      &::geometry_msgs::_Pose_default_instance_);
}
inline const ::geometry_msgs::Pose& PoseStamped::pose() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.PoseStamped.pose)
  return _internal_pose();
}
inline ::geometry_msgs::Pose* PoseStamped::release_pose() {
  // @@protoc_insertion_point(field_release:geometry_msgs.PoseStamped.pose)
  
  ::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Pose* PoseStamped::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::geometry_msgs::Pose* PoseStamped::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:geometry_msgs.PoseStamped.pose)
  return _internal_mutable_pose();
}
inline void PoseStamped::set_allocated_pose(::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:geometry_msgs.PoseStamped.pose)
}

// -------------------------------------------------------------------

// Twist

// .geometry_msgs.Vector3 linear = 1;
inline bool Twist::_internal_has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline bool Twist::has_linear() const {
  return _internal_has_linear();
}
inline void Twist::clear_linear() {
  if (GetArenaNoVirtual() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::geometry_msgs::Vector3& Twist::_internal_linear() const {
  const ::geometry_msgs::Vector3* p = linear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Vector3*>(
      &::geometry_msgs::_Vector3_default_instance_);
}
inline const ::geometry_msgs::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Twist.linear)
  return _internal_linear();
}
inline ::geometry_msgs::Vector3* Twist::release_linear() {
  // @@protoc_insertion_point(field_release:geometry_msgs.Twist.linear)
  
  ::geometry_msgs::Vector3* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Vector3* Twist::_internal_mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Vector3>(GetArenaNoVirtual());
    linear_ = p;
  }
  return linear_;
}
inline ::geometry_msgs::Vector3* Twist::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:geometry_msgs.Twist.linear)
  return _internal_mutable_linear();
}
inline void Twist::set_allocated_linear(::geometry_msgs::Vector3* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:geometry_msgs.Twist.linear)
}

// .geometry_msgs.Vector3 angular = 2;
inline bool Twist::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool Twist::has_angular() const {
  return _internal_has_angular();
}
inline void Twist::clear_angular() {
  if (GetArenaNoVirtual() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::geometry_msgs::Vector3& Twist::_internal_angular() const {
  const ::geometry_msgs::Vector3* p = angular_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Vector3*>(
      &::geometry_msgs::_Vector3_default_instance_);
}
inline const ::geometry_msgs::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.Twist.angular)
  return _internal_angular();
}
inline ::geometry_msgs::Vector3* Twist::release_angular() {
  // @@protoc_insertion_point(field_release:geometry_msgs.Twist.angular)
  
  ::geometry_msgs::Vector3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Vector3* Twist::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Vector3>(GetArenaNoVirtual());
    angular_ = p;
  }
  return angular_;
}
inline ::geometry_msgs::Vector3* Twist::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:geometry_msgs.Twist.angular)
  return _internal_mutable_angular();
}
inline void Twist::set_allocated_angular(::geometry_msgs::Vector3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:geometry_msgs.Twist.angular)
}

// -------------------------------------------------------------------

// PoseWithCovariance

// .geometry_msgs.Pose pose = 1;
inline bool PoseWithCovariance::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseWithCovariance::has_pose() const {
  return _internal_has_pose();
}
inline void PoseWithCovariance::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::geometry_msgs::Pose& PoseWithCovariance::_internal_pose() const {
  const ::geometry_msgs::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Pose*>(
      &::geometry_msgs::_Pose_default_instance_);
}
inline const ::geometry_msgs::Pose& PoseWithCovariance::pose() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.PoseWithCovariance.pose)
  return _internal_pose();
}
inline ::geometry_msgs::Pose* PoseWithCovariance::release_pose() {
  // @@protoc_insertion_point(field_release:geometry_msgs.PoseWithCovariance.pose)
  
  ::geometry_msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Pose* PoseWithCovariance::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  return pose_;
}
inline ::geometry_msgs::Pose* PoseWithCovariance::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:geometry_msgs.PoseWithCovariance.pose)
  return _internal_mutable_pose();
}
inline void PoseWithCovariance::set_allocated_pose(::geometry_msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:geometry_msgs.PoseWithCovariance.pose)
}

// repeated double covariance = 2;
inline int PoseWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int PoseWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void PoseWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline double PoseWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline double PoseWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:geometry_msgs.PoseWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void PoseWithCovariance::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:geometry_msgs.PoseWithCovariance.covariance)
}
inline void PoseWithCovariance::_internal_add_covariance(double value) {
  covariance_.Add(value);
}
inline void PoseWithCovariance::add_covariance(double value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:geometry_msgs.PoseWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PoseWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PoseWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:geometry_msgs.PoseWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PoseWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PoseWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:geometry_msgs.PoseWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// -------------------------------------------------------------------

// TwistWithCovariance

// .geometry_msgs.Twist twist = 1;
inline bool TwistWithCovariance::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool TwistWithCovariance::has_twist() const {
  return _internal_has_twist();
}
inline void TwistWithCovariance::clear_twist() {
  if (GetArenaNoVirtual() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
}
inline const ::geometry_msgs::Twist& TwistWithCovariance::_internal_twist() const {
  const ::geometry_msgs::Twist* p = twist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::geometry_msgs::Twist*>(
      &::geometry_msgs::_Twist_default_instance_);
}
inline const ::geometry_msgs::Twist& TwistWithCovariance::twist() const {
  // @@protoc_insertion_point(field_get:geometry_msgs.TwistWithCovariance.twist)
  return _internal_twist();
}
inline ::geometry_msgs::Twist* TwistWithCovariance::release_twist() {
  // @@protoc_insertion_point(field_release:geometry_msgs.TwistWithCovariance.twist)
  
  ::geometry_msgs::Twist* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::geometry_msgs::Twist* TwistWithCovariance::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::geometry_msgs::Twist>(GetArenaNoVirtual());
    twist_ = p;
  }
  return twist_;
}
inline ::geometry_msgs::Twist* TwistWithCovariance::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:geometry_msgs.TwistWithCovariance.twist)
  return _internal_mutable_twist();
}
inline void TwistWithCovariance::set_allocated_twist(::geometry_msgs::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete twist_;
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:geometry_msgs.TwistWithCovariance.twist)
}

// repeated double covariance = 2;
inline int TwistWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int TwistWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void TwistWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline double TwistWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline double TwistWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:geometry_msgs.TwistWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void TwistWithCovariance::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:geometry_msgs.TwistWithCovariance.covariance)
}
inline void TwistWithCovariance::_internal_add_covariance(double value) {
  covariance_.Add(value);
}
inline void TwistWithCovariance::add_covariance(double value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:geometry_msgs.TwistWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TwistWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TwistWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:geometry_msgs.TwistWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TwistWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TwistWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:geometry_msgs.TwistWithCovariance.covariance)
  return _internal_mutable_covariance();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geometry_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geometry_5fmsgs_2eproto
